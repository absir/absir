/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tplatform;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-11")
public class PlatformFromService {

    public interface Iface {

        public DPlatformFromSetting setting(DPlatformFrom platformFrom) throws org.apache.thrift.TException;

        public List<DAnnouncement> announcements(int fromId, boolean review) throws org.apache.thrift.TException;

        public List<DServer> servers(int fromId, boolean review) throws org.apache.thrift.TException;

        public DIdentityResult identity(int fromId, long serverId, String identities) throws org.apache.thrift.TException;

        public DLoginResult login(int fromId, long serverId, String username, String password) throws org.apache.thrift.TException;

        public DRegisterResult sign(int fromId, long serverId, String username, String password) throws org.apache.thrift.TException;

        public EPasswordResult password(String sessionId, String oldPassword, String newPassword) throws org.apache.thrift.TException;

        public DOrderResult order(DOrderInfo info) throws org.apache.thrift.TException;

        public boolean validate(DOrderValidator validator) throws org.apache.thrift.TException;
    }

    public interface AsyncIface {

        public void setting(DPlatformFrom platformFrom, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void announcements(int fromId, boolean review, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void servers(int fromId, boolean review, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void identity(int fromId, long serverId, String identities, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void login(int fromId, long serverId, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void sign(int fromId, long serverId, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void password(String sessionId, String oldPassword, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void order(DOrderInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void validate(DOrderValidator validator, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public DPlatformFromSetting setting(DPlatformFrom platformFrom) throws org.apache.thrift.TException {
            send_setting(platformFrom);
            return recv_setting();
        }

        public void send_setting(DPlatformFrom platformFrom) throws org.apache.thrift.TException {
            setting_args args = new setting_args();
            args.setPlatformFrom(platformFrom);
            sendBase("setting", args);
        }

        public DPlatformFromSetting recv_setting() throws org.apache.thrift.TException {
            setting_result result = new setting_result();
            receiveBase(result, "setting");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setting failed: unknown result");
        }

        public List<DAnnouncement> announcements(int fromId, boolean review) throws org.apache.thrift.TException {
            send_announcements(fromId, review);
            return recv_announcements();
        }

        public void send_announcements(int fromId, boolean review) throws org.apache.thrift.TException {
            announcements_args args = new announcements_args();
            args.setFromId(fromId);
            args.setReview(review);
            sendBase("announcements", args);
        }

        public List<DAnnouncement> recv_announcements() throws org.apache.thrift.TException {
            announcements_result result = new announcements_result();
            receiveBase(result, "announcements");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "announcements failed: unknown result");
        }

        public List<DServer> servers(int fromId, boolean review) throws org.apache.thrift.TException {
            send_servers(fromId, review);
            return recv_servers();
        }

        public void send_servers(int fromId, boolean review) throws org.apache.thrift.TException {
            servers_args args = new servers_args();
            args.setFromId(fromId);
            args.setReview(review);
            sendBase("servers", args);
        }

        public List<DServer> recv_servers() throws org.apache.thrift.TException {
            servers_result result = new servers_result();
            receiveBase(result, "servers");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "servers failed: unknown result");
        }

        public DIdentityResult identity(int fromId, long serverId, String identities) throws org.apache.thrift.TException {
            send_identity(fromId, serverId, identities);
            return recv_identity();
        }

        public void send_identity(int fromId, long serverId, String identities) throws org.apache.thrift.TException {
            identity_args args = new identity_args();
            args.setFromId(fromId);
            args.setServerId(serverId);
            args.setIdentities(identities);
            sendBase("identity", args);
        }

        public DIdentityResult recv_identity() throws org.apache.thrift.TException {
            identity_result result = new identity_result();
            receiveBase(result, "identity");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "identity failed: unknown result");
        }

        public DLoginResult login(int fromId, long serverId, String username, String password) throws org.apache.thrift.TException {
            send_login(fromId, serverId, username, password);
            return recv_login();
        }

        public void send_login(int fromId, long serverId, String username, String password) throws org.apache.thrift.TException {
            login_args args = new login_args();
            args.setFromId(fromId);
            args.setServerId(serverId);
            args.setUsername(username);
            args.setPassword(password);
            sendBase("login", args);
        }

        public DLoginResult recv_login() throws org.apache.thrift.TException {
            login_result result = new login_result();
            receiveBase(result, "login");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
        }

        public DRegisterResult sign(int fromId, long serverId, String username, String password) throws org.apache.thrift.TException {
            send_sign(fromId, serverId, username, password);
            return recv_sign();
        }

        public void send_sign(int fromId, long serverId, String username, String password) throws org.apache.thrift.TException {
            sign_args args = new sign_args();
            args.setFromId(fromId);
            args.setServerId(serverId);
            args.setUsername(username);
            args.setPassword(password);
            sendBase("sign", args);
        }

        public DRegisterResult recv_sign() throws org.apache.thrift.TException {
            sign_result result = new sign_result();
            receiveBase(result, "sign");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sign failed: unknown result");
        }

        public EPasswordResult password(String sessionId, String oldPassword, String newPassword) throws org.apache.thrift.TException {
            send_password(sessionId, oldPassword, newPassword);
            return recv_password();
        }

        public void send_password(String sessionId, String oldPassword, String newPassword) throws org.apache.thrift.TException {
            password_args args = new password_args();
            args.setSessionId(sessionId);
            args.setOldPassword(oldPassword);
            args.setNewPassword(newPassword);
            sendBase("password", args);
        }

        public EPasswordResult recv_password() throws org.apache.thrift.TException {
            password_result result = new password_result();
            receiveBase(result, "password");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "password failed: unknown result");
        }

        public DOrderResult order(DOrderInfo info) throws org.apache.thrift.TException {
            send_order(info);
            return recv_order();
        }

        public void send_order(DOrderInfo info) throws org.apache.thrift.TException {
            order_args args = new order_args();
            args.setInfo(info);
            sendBase("order", args);
        }

        public DOrderResult recv_order() throws org.apache.thrift.TException {
            order_result result = new order_result();
            receiveBase(result, "order");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "order failed: unknown result");
        }

        public boolean validate(DOrderValidator validator) throws org.apache.thrift.TException {
            send_validate(validator);
            return recv_validate();
        }

        public void send_validate(DOrderValidator validator) throws org.apache.thrift.TException {
            validate_args args = new validate_args();
            args.setValidator(validator);
            sendBase("validate", args);
        }

        public boolean recv_validate() throws org.apache.thrift.TException {
            validate_result result = new validate_result();
            receiveBase(result, "validate");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validate failed: unknown result");
        }
    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

            private org.apache.thrift.async.TAsyncClientManager clientManager;

            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void setting(DPlatformFrom platformFrom, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setting_call method_call = new setting_call(platformFrom, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setting_call extends org.apache.thrift.async.TAsyncMethodCall {

            private DPlatformFrom platformFrom;

            public setting_call(DPlatformFrom platformFrom, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.platformFrom = platformFrom;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setting", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setting_args args = new setting_args();
                args.setPlatformFrom(platformFrom);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public DPlatformFromSetting getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_setting();
            }
        }

        public void announcements(int fromId, boolean review, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            announcements_call method_call = new announcements_call(fromId, review, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class announcements_call extends org.apache.thrift.async.TAsyncMethodCall {

            private int fromId;

            private boolean review;

            public announcements_call(int fromId, boolean review, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fromId = fromId;
                this.review = review;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("announcements", org.apache.thrift.protocol.TMessageType.CALL, 0));
                announcements_args args = new announcements_args();
                args.setFromId(fromId);
                args.setReview(review);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<DAnnouncement> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_announcements();
            }
        }

        public void servers(int fromId, boolean review, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            servers_call method_call = new servers_call(fromId, review, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class servers_call extends org.apache.thrift.async.TAsyncMethodCall {

            private int fromId;

            private boolean review;

            public servers_call(int fromId, boolean review, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fromId = fromId;
                this.review = review;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("servers", org.apache.thrift.protocol.TMessageType.CALL, 0));
                servers_args args = new servers_args();
                args.setFromId(fromId);
                args.setReview(review);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<DServer> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_servers();
            }
        }

        public void identity(int fromId, long serverId, String identities, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            identity_call method_call = new identity_call(fromId, serverId, identities, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class identity_call extends org.apache.thrift.async.TAsyncMethodCall {

            private int fromId;

            private long serverId;

            private String identities;

            public identity_call(int fromId, long serverId, String identities, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fromId = fromId;
                this.serverId = serverId;
                this.identities = identities;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("identity", org.apache.thrift.protocol.TMessageType.CALL, 0));
                identity_args args = new identity_args();
                args.setFromId(fromId);
                args.setServerId(serverId);
                args.setIdentities(identities);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public DIdentityResult getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_identity();
            }
        }

        public void login(int fromId, long serverId, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            login_call method_call = new login_call(fromId, serverId, username, password, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class login_call extends org.apache.thrift.async.TAsyncMethodCall {

            private int fromId;

            private long serverId;

            private String username;

            private String password;

            public login_call(int fromId, long serverId, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fromId = fromId;
                this.serverId = serverId;
                this.username = username;
                this.password = password;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
                login_args args = new login_args();
                args.setFromId(fromId);
                args.setServerId(serverId);
                args.setUsername(username);
                args.setPassword(password);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public DLoginResult getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_login();
            }
        }

        public void sign(int fromId, long serverId, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            sign_call method_call = new sign_call(fromId, serverId, username, password, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class sign_call extends org.apache.thrift.async.TAsyncMethodCall {

            private int fromId;

            private long serverId;

            private String username;

            private String password;

            public sign_call(int fromId, long serverId, String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fromId = fromId;
                this.serverId = serverId;
                this.username = username;
                this.password = password;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sign", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sign_args args = new sign_args();
                args.setFromId(fromId);
                args.setServerId(serverId);
                args.setUsername(username);
                args.setPassword(password);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public DRegisterResult getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_sign();
            }
        }

        public void password(String sessionId, String oldPassword, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            password_call method_call = new password_call(sessionId, oldPassword, newPassword, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class password_call extends org.apache.thrift.async.TAsyncMethodCall {

            private String sessionId;

            private String oldPassword;

            private String newPassword;

            public password_call(String sessionId, String oldPassword, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.sessionId = sessionId;
                this.oldPassword = oldPassword;
                this.newPassword = newPassword;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("password", org.apache.thrift.protocol.TMessageType.CALL, 0));
                password_args args = new password_args();
                args.setSessionId(sessionId);
                args.setOldPassword(oldPassword);
                args.setNewPassword(newPassword);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public EPasswordResult getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_password();
            }
        }

        public void order(DOrderInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            order_call method_call = new order_call(info, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class order_call extends org.apache.thrift.async.TAsyncMethodCall {

            private DOrderInfo info;

            public order_call(DOrderInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.info = info;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("order", org.apache.thrift.protocol.TMessageType.CALL, 0));
                order_args args = new order_args();
                args.setInfo(info);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public DOrderResult getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_order();
            }
        }

        public void validate(DOrderValidator validator, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            validate_call method_call = new validate_call(validator, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class validate_call extends org.apache.thrift.async.TAsyncMethodCall {

            private DOrderValidator validator;

            public validate_call(DOrderValidator validator, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.validator = validator;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validate", org.apache.thrift.protocol.TMessageType.CALL, 0));
                validate_args args = new validate_args();
                args.setValidator(validator);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_validate();
            }
        }
    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {

        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("setting", new setting());
            processMap.put("announcements", new announcements());
            processMap.put("servers", new servers());
            processMap.put("identity", new identity());
            processMap.put("login", new login());
            processMap.put("sign", new sign());
            processMap.put("password", new password());
            processMap.put("order", new order());
            processMap.put("validate", new validate());
            return processMap;
        }

        public static class setting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setting_args> {

            public setting() {
                super("setting");
            }

            public setting_args getEmptyArgsInstance() {
                return new setting_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public setting_result getResult(I iface, setting_args args) throws org.apache.thrift.TException {
                setting_result result = new setting_result();
                result.success = iface.setting(args.platformFrom);
                return result;
            }
        }

        public static class announcements<I extends Iface> extends org.apache.thrift.ProcessFunction<I, announcements_args> {

            public announcements() {
                super("announcements");
            }

            public announcements_args getEmptyArgsInstance() {
                return new announcements_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public announcements_result getResult(I iface, announcements_args args) throws org.apache.thrift.TException {
                announcements_result result = new announcements_result();
                result.success = iface.announcements(args.fromId, args.review);
                return result;
            }
        }

        public static class servers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, servers_args> {

            public servers() {
                super("servers");
            }

            public servers_args getEmptyArgsInstance() {
                return new servers_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public servers_result getResult(I iface, servers_args args) throws org.apache.thrift.TException {
                servers_result result = new servers_result();
                result.success = iface.servers(args.fromId, args.review);
                return result;
            }
        }

        public static class identity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, identity_args> {

            public identity() {
                super("identity");
            }

            public identity_args getEmptyArgsInstance() {
                return new identity_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public identity_result getResult(I iface, identity_args args) throws org.apache.thrift.TException {
                identity_result result = new identity_result();
                result.success = iface.identity(args.fromId, args.serverId, args.identities);
                return result;
            }
        }

        public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {

            public login() {
                super("login");
            }

            public login_args getEmptyArgsInstance() {
                return new login_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
                login_result result = new login_result();
                result.success = iface.login(args.fromId, args.serverId, args.username, args.password);
                return result;
            }
        }

        public static class sign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sign_args> {

            public sign() {
                super("sign");
            }

            public sign_args getEmptyArgsInstance() {
                return new sign_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public sign_result getResult(I iface, sign_args args) throws org.apache.thrift.TException {
                sign_result result = new sign_result();
                result.success = iface.sign(args.fromId, args.serverId, args.username, args.password);
                return result;
            }
        }

        public static class password<I extends Iface> extends org.apache.thrift.ProcessFunction<I, password_args> {

            public password() {
                super("password");
            }

            public password_args getEmptyArgsInstance() {
                return new password_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public password_result getResult(I iface, password_args args) throws org.apache.thrift.TException {
                password_result result = new password_result();
                result.success = iface.password(args.sessionId, args.oldPassword, args.newPassword);
                return result;
            }
        }

        public static class order<I extends Iface> extends org.apache.thrift.ProcessFunction<I, order_args> {

            public order() {
                super("order");
            }

            public order_args getEmptyArgsInstance() {
                return new order_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public order_result getResult(I iface, order_args args) throws org.apache.thrift.TException {
                order_result result = new order_result();
                result.success = iface.order(args.info);
                return result;
            }
        }

        public static class validate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validate_args> {

            public validate() {
                super("validate");
            }

            public validate_args getEmptyArgsInstance() {
                return new validate_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public validate_result getResult(I iface, validate_args args) throws org.apache.thrift.TException {
                validate_result result = new validate_result();
                result.success = iface.validate(args.validator);
                result.setSuccessIsSet(true);
                return result;
            }
        }
    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {

        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("setting", new setting());
            processMap.put("announcements", new announcements());
            processMap.put("servers", new servers());
            processMap.put("identity", new identity());
            processMap.put("login", new login());
            processMap.put("sign", new sign());
            processMap.put("password", new password());
            processMap.put("order", new order());
            processMap.put("validate", new validate());
            return processMap;
        }

        public static class setting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setting_args, DPlatformFromSetting> {

            public setting() {
                super("setting");
            }

            public setting_args getEmptyArgsInstance() {
                return new setting_args();
            }

            public AsyncMethodCallback<DPlatformFromSetting> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<DPlatformFromSetting>() {

                    public void onComplete(DPlatformFromSetting o) {
                        setting_result result = new setting_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        setting_result result = new setting_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setting_args args, org.apache.thrift.async.AsyncMethodCallback<DPlatformFromSetting> resultHandler) throws TException {
                iface.setting(args.platformFrom, resultHandler);
            }
        }

        public static class announcements<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, announcements_args, List<DAnnouncement>> {

            public announcements() {
                super("announcements");
            }

            public announcements_args getEmptyArgsInstance() {
                return new announcements_args();
            }

            public AsyncMethodCallback<List<DAnnouncement>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<DAnnouncement>>() {

                    public void onComplete(List<DAnnouncement> o) {
                        announcements_result result = new announcements_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        announcements_result result = new announcements_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, announcements_args args, org.apache.thrift.async.AsyncMethodCallback<List<DAnnouncement>> resultHandler) throws TException {
                iface.announcements(args.fromId, args.review, resultHandler);
            }
        }

        public static class servers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, servers_args, List<DServer>> {

            public servers() {
                super("servers");
            }

            public servers_args getEmptyArgsInstance() {
                return new servers_args();
            }

            public AsyncMethodCallback<List<DServer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<DServer>>() {

                    public void onComplete(List<DServer> o) {
                        servers_result result = new servers_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        servers_result result = new servers_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, servers_args args, org.apache.thrift.async.AsyncMethodCallback<List<DServer>> resultHandler) throws TException {
                iface.servers(args.fromId, args.review, resultHandler);
            }
        }

        public static class identity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, identity_args, DIdentityResult> {

            public identity() {
                super("identity");
            }

            public identity_args getEmptyArgsInstance() {
                return new identity_args();
            }

            public AsyncMethodCallback<DIdentityResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<DIdentityResult>() {

                    public void onComplete(DIdentityResult o) {
                        identity_result result = new identity_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        identity_result result = new identity_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, identity_args args, org.apache.thrift.async.AsyncMethodCallback<DIdentityResult> resultHandler) throws TException {
                iface.identity(args.fromId, args.serverId, args.identities, resultHandler);
            }
        }

        public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, DLoginResult> {

            public login() {
                super("login");
            }

            public login_args getEmptyArgsInstance() {
                return new login_args();
            }

            public AsyncMethodCallback<DLoginResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<DLoginResult>() {

                    public void onComplete(DLoginResult o) {
                        login_result result = new login_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        login_result result = new login_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<DLoginResult> resultHandler) throws TException {
                iface.login(args.fromId, args.serverId, args.username, args.password, resultHandler);
            }
        }

        public static class sign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sign_args, DRegisterResult> {

            public sign() {
                super("sign");
            }

            public sign_args getEmptyArgsInstance() {
                return new sign_args();
            }

            public AsyncMethodCallback<DRegisterResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<DRegisterResult>() {

                    public void onComplete(DRegisterResult o) {
                        sign_result result = new sign_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        sign_result result = new sign_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sign_args args, org.apache.thrift.async.AsyncMethodCallback<DRegisterResult> resultHandler) throws TException {
                iface.sign(args.fromId, args.serverId, args.username, args.password, resultHandler);
            }
        }

        public static class password<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, password_args, EPasswordResult> {

            public password() {
                super("password");
            }

            public password_args getEmptyArgsInstance() {
                return new password_args();
            }

            public AsyncMethodCallback<EPasswordResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<EPasswordResult>() {

                    public void onComplete(EPasswordResult o) {
                        password_result result = new password_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        password_result result = new password_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, password_args args, org.apache.thrift.async.AsyncMethodCallback<EPasswordResult> resultHandler) throws TException {
                iface.password(args.sessionId, args.oldPassword, args.newPassword, resultHandler);
            }
        }

        public static class order<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, order_args, DOrderResult> {

            public order() {
                super("order");
            }

            public order_args getEmptyArgsInstance() {
                return new order_args();
            }

            public AsyncMethodCallback<DOrderResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<DOrderResult>() {

                    public void onComplete(DOrderResult o) {
                        order_result result = new order_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        order_result result = new order_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, order_args args, org.apache.thrift.async.AsyncMethodCallback<DOrderResult> resultHandler) throws TException {
                iface.order(args.info, resultHandler);
            }
        }

        public static class validate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validate_args, Boolean> {

            public validate() {
                super("validate");
            }

            public validate_args getEmptyArgsInstance() {
                return new validate_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {

                    public void onComplete(Boolean o) {
                        validate_result result = new validate_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        validate_result result = new validate_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, validate_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.validate(args.validator, resultHandler);
            }
        }
    }

    public static class setting_args implements org.apache.thrift.TBase<setting_args, setting_args._Fields>, java.io.Serializable, Cloneable, Comparable<setting_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setting_args");

        private static final org.apache.thrift.protocol.TField PLATFORM_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("platformFrom", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setting_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setting_argsTupleSchemeFactory());
        }

        // required
        public DPlatformFrom platformFrom;

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            PLATFORM_FROM((short) 1, "platformFrom");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // PLATFORM_FROM
                    1:
                        return PLATFORM_FROM;
                    default:
                        return null;
                }
            }

            /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PLATFORM_FROM, new org.apache.thrift.meta_data.FieldMetaData("platformFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DPlatformFrom.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setting_args.class, metaDataMap);
        }

        public setting_args() {
        }

        public setting_args(DPlatformFrom platformFrom) {
            this();
            this.platformFrom = platformFrom;
        }

        /**
     * Performs a deep copy on <i>other</i>.
     */
        public setting_args(setting_args other) {
            if (other.isSetPlatformFrom()) {
                this.platformFrom = new DPlatformFrom(other.platformFrom);
            }
        }

        public setting_args deepCopy() {
            return new setting_args(this);
        }

        @Override
        public void clear() {
            this.platformFrom = null;
        }

        public DPlatformFrom getPlatformFrom() {
            return this.platformFrom;
        }

        public setting_args setPlatformFrom(DPlatformFrom platformFrom) {
            this.platformFrom = platformFrom;
            return this;
        }

        public void unsetPlatformFrom() {
            this.platformFrom = null;
        }

        /** Returns true if field platformFrom is set (has been assigned a value) and false otherwise */
        public boolean isSetPlatformFrom() {
            return this.platformFrom != null;
        }

        public void setPlatformFromIsSet(boolean value) {
            if (!value) {
                this.platformFrom = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case PLATFORM_FROM:
                    if (value == null) {
                        unsetPlatformFrom();
                    } else {
                        setPlatformFrom((DPlatformFrom) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case PLATFORM_FROM:
                    return getPlatformFrom();
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case PLATFORM_FROM:
                    return isSetPlatformFrom();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setting_args)
                return this.equals((setting_args) that);
            return false;
        }

        public boolean equals(setting_args that) {
            if (that == null)
                return false;
            boolean this_present_platformFrom = true && this.isSetPlatformFrom();
            boolean that_present_platformFrom = true && that.isSetPlatformFrom();
            if (this_present_platformFrom || that_present_platformFrom) {
                if (!(this_present_platformFrom && that_present_platformFrom))
                    return false;
                if (!this.platformFrom.equals(that.platformFrom))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_platformFrom = true && (isSetPlatformFrom());
            list.add(present_platformFrom);
            if (present_platformFrom)
                list.add(platformFrom);
            return list.hashCode();
        }

        @Override
        public int compareTo(setting_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetPlatformFrom()).compareTo(other.isSetPlatformFrom());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPlatformFrom()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformFrom, other.platformFrom);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setting_args(");
            boolean first = true;
            sb.append("platformFrom:");
            if (this.platformFrom == null) {
                sb.append("null");
            } else {
                sb.append(this.platformFrom);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for sub-struct validity
            if (platformFrom != null) {
                platformFrom.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setting_argsStandardSchemeFactory implements SchemeFactory {

            public setting_argsStandardScheme getScheme() {
                return new setting_argsStandardScheme();
            }
        }

        private static class setting_argsStandardScheme extends StandardScheme<setting_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setting_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // PLATFORM_FROM
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.platformFrom = new DPlatformFrom();
                                struct.platformFrom.read(iprot);
                                struct.setPlatformFromIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setting_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.platformFrom != null) {
                    oprot.writeFieldBegin(PLATFORM_FROM_FIELD_DESC);
                    struct.platformFrom.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class setting_argsTupleSchemeFactory implements SchemeFactory {

            public setting_argsTupleScheme getScheme() {
                return new setting_argsTupleScheme();
            }
        }

        private static class setting_argsTupleScheme extends TupleScheme<setting_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setting_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPlatformFrom()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPlatformFrom()) {
                    struct.platformFrom.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setting_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.platformFrom = new DPlatformFrom();
                    struct.platformFrom.read(iprot);
                    struct.setPlatformFromIsSet(true);
                }
            }
        }
    }

    public static class setting_result implements org.apache.thrift.TBase<setting_result, setting_result._Fields>, java.io.Serializable, Cloneable, Comparable<setting_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setting_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setting_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setting_resultTupleSchemeFactory());
        }

        // required
        public DPlatformFromSetting success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DPlatformFromSetting.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setting_result.class, metaDataMap);
        }

        public setting_result() {
        }

        public setting_result(DPlatformFromSetting success) {
            this();
            this.success = success;
        }

        public setting_result(setting_result other) {
            if (other.isSetSuccess()) {
                this.success = new DPlatformFromSetting(other.success);
            }
        }

        public setting_result deepCopy() {
            return new setting_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public DPlatformFromSetting getSuccess() {
            return this.success;
        }

        public setting_result setSuccess(DPlatformFromSetting success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((DPlatformFromSetting) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setting_result)
                return this.equals((setting_result) that);
            return false;
        }

        public boolean equals(setting_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);
            return list.hashCode();
        }

        @Override
        public int compareTo(setting_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setting_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setting_resultStandardSchemeFactory implements SchemeFactory {

            public setting_resultStandardScheme getScheme() {
                return new setting_resultStandardScheme();
            }
        }

        private static class setting_resultStandardScheme extends StandardScheme<setting_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setting_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new DPlatformFromSetting();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setting_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class setting_resultTupleSchemeFactory implements SchemeFactory {

            public setting_resultTupleScheme getScheme() {
                return new setting_resultTupleScheme();
            }
        }

        private static class setting_resultTupleScheme extends TupleScheme<setting_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setting_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setting_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new DPlatformFromSetting();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class announcements_args implements org.apache.thrift.TBase<announcements_args, announcements_args._Fields>, java.io.Serializable, Cloneable, Comparable<announcements_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("announcements_args");

        private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromId", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final org.apache.thrift.protocol.TField REVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("review", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new announcements_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new announcements_argsTupleSchemeFactory());
        }

        // required
        public int fromId;

        // required
        public boolean review;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FROM_ID((short) 1, "fromId"), REVIEW((short) 2, "review");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // FROM_ID
                    1:
                        return FROM_ID;
                    case // REVIEW
                    2:
                        return REVIEW;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FROMID_ISSET_ID = 0;

        private static final int __REVIEW_ISSET_ID = 1;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.REVIEW, new org.apache.thrift.meta_data.FieldMetaData("review", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(announcements_args.class, metaDataMap);
        }

        public announcements_args() {
        }

        public announcements_args(int fromId, boolean review) {
            this();
            this.fromId = fromId;
            setFromIdIsSet(true);
            this.review = review;
            setReviewIsSet(true);
        }

        public announcements_args(announcements_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.fromId = other.fromId;
            this.review = other.review;
        }

        public announcements_args deepCopy() {
            return new announcements_args(this);
        }

        @Override
        public void clear() {
            setFromIdIsSet(false);
            this.fromId = 0;
            setReviewIsSet(false);
            this.review = false;
        }

        public int getFromId() {
            return this.fromId;
        }

        public announcements_args setFromId(int fromId) {
            this.fromId = fromId;
            setFromIdIsSet(true);
            return this;
        }

        public void unsetFromId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        /** Returns true if field fromId is set (has been assigned a value) and false otherwise */
        public boolean isSetFromId() {
            return EncodingUtils.testBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public void setFromIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMID_ISSET_ID, value);
        }

        public boolean isReview() {
            return this.review;
        }

        public announcements_args setReview(boolean review) {
            this.review = review;
            setReviewIsSet(true);
            return this;
        }

        public void unsetReview() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEW_ISSET_ID);
        }

        /** Returns true if field review is set (has been assigned a value) and false otherwise */
        public boolean isSetReview() {
            return EncodingUtils.testBit(__isset_bitfield, __REVIEW_ISSET_ID);
        }

        public void setReviewIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEW_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case FROM_ID:
                    if (value == null) {
                        unsetFromId();
                    } else {
                        setFromId((Integer) value);
                    }
                    break;
                case REVIEW:
                    if (value == null) {
                        unsetReview();
                    } else {
                        setReview((Boolean) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case FROM_ID:
                    return getFromId();
                case REVIEW:
                    return isReview();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case FROM_ID:
                    return isSetFromId();
                case REVIEW:
                    return isSetReview();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof announcements_args)
                return this.equals((announcements_args) that);
            return false;
        }

        public boolean equals(announcements_args that) {
            if (that == null)
                return false;
            boolean this_present_fromId = true;
            boolean that_present_fromId = true;
            if (this_present_fromId || that_present_fromId) {
                if (!(this_present_fromId && that_present_fromId))
                    return false;
                if (this.fromId != that.fromId)
                    return false;
            }
            boolean this_present_review = true;
            boolean that_present_review = true;
            if (this_present_review || that_present_review) {
                if (!(this_present_review && that_present_review))
                    return false;
                if (this.review != that.review)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_fromId = true;
            list.add(present_fromId);
            if (present_fromId)
                list.add(fromId);
            boolean present_review = true;
            list.add(present_review);
            if (present_review)
                list.add(review);
            return list.hashCode();
        }

        @Override
        public int compareTo(announcements_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFromId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetReview()).compareTo(other.isSetReview());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReview()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.review, other.review);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("announcements_args(");
            boolean first = true;
            sb.append("fromId:");
            sb.append(this.fromId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("review:");
            sb.append(this.review);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class announcements_argsStandardSchemeFactory implements SchemeFactory {

            public announcements_argsStandardScheme getScheme() {
                return new announcements_argsStandardScheme();
            }
        }

        private static class announcements_argsStandardScheme extends StandardScheme<announcements_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, announcements_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // FROM_ID
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fromId = iprot.readI32();
                                struct.setFromIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // REVIEW
                        2:
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.review = iprot.readBool();
                                struct.setReviewIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, announcements_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
                oprot.writeI32(struct.fromId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(REVIEW_FIELD_DESC);
                oprot.writeBool(struct.review);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class announcements_argsTupleSchemeFactory implements SchemeFactory {

            public announcements_argsTupleScheme getScheme() {
                return new announcements_argsTupleScheme();
            }
        }

        private static class announcements_argsTupleScheme extends TupleScheme<announcements_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, announcements_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFromId()) {
                    optionals.set(0);
                }
                if (struct.isSetReview()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetFromId()) {
                    oprot.writeI32(struct.fromId);
                }
                if (struct.isSetReview()) {
                    oprot.writeBool(struct.review);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, announcements_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.fromId = iprot.readI32();
                    struct.setFromIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.review = iprot.readBool();
                    struct.setReviewIsSet(true);
                }
            }
        }
    }

    public static class announcements_result implements org.apache.thrift.TBase<announcements_result, announcements_result._Fields>, java.io.Serializable, Cloneable, Comparable<announcements_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("announcements_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new announcements_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new announcements_resultTupleSchemeFactory());
        }

        // required
        public List<DAnnouncement> success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DAnnouncement.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(announcements_result.class, metaDataMap);
        }

        public announcements_result() {
        }

        public announcements_result(List<DAnnouncement> success) {
            this();
            this.success = success;
        }

        public announcements_result(announcements_result other) {
            if (other.isSetSuccess()) {
                List<DAnnouncement> __this__success = new ArrayList<DAnnouncement>(other.success.size());
                for (DAnnouncement other_element : other.success) {
                    __this__success.add(new DAnnouncement(other_element));
                }
                this.success = __this__success;
            }
        }

        public announcements_result deepCopy() {
            return new announcements_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<DAnnouncement> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(DAnnouncement elem) {
            if (this.success == null) {
                this.success = new ArrayList<DAnnouncement>();
            }
            this.success.add(elem);
        }

        public List<DAnnouncement> getSuccess() {
            return this.success;
        }

        public announcements_result setSuccess(List<DAnnouncement> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<DAnnouncement>) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof announcements_result)
                return this.equals((announcements_result) that);
            return false;
        }

        public boolean equals(announcements_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);
            return list.hashCode();
        }

        @Override
        public int compareTo(announcements_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("announcements_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class announcements_resultStandardSchemeFactory implements SchemeFactory {

            public announcements_resultStandardScheme getScheme() {
                return new announcements_resultStandardScheme();
            }
        }

        private static class announcements_resultStandardScheme extends StandardScheme<announcements_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, announcements_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.success = new ArrayList<DAnnouncement>(_list8.size);
                                    DAnnouncement _elem9;
                                    for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
                                        _elem9 = new DAnnouncement();
                                        _elem9.read(iprot);
                                        struct.success.add(_elem9);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, announcements_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (DAnnouncement _iter11 : struct.success) {
                            _iter11.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class announcements_resultTupleSchemeFactory implements SchemeFactory {

            public announcements_resultTupleScheme getScheme() {
                return new announcements_resultTupleScheme();
            }
        }

        private static class announcements_resultTupleScheme extends TupleScheme<announcements_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, announcements_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (DAnnouncement _iter12 : struct.success) {
                            _iter12.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, announcements_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<DAnnouncement>(_list13.size);
                        DAnnouncement _elem14;
                        for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                            _elem14 = new DAnnouncement();
                            _elem14.read(iprot);
                            struct.success.add(_elem14);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class servers_args implements org.apache.thrift.TBase<servers_args, servers_args._Fields>, java.io.Serializable, Cloneable, Comparable<servers_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("servers_args");

        private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromId", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final org.apache.thrift.protocol.TField REVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("review", org.apache.thrift.protocol.TType.BOOL, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new servers_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new servers_argsTupleSchemeFactory());
        }

        // required
        public int fromId;

        // required
        public boolean review;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FROM_ID((short) 1, "fromId"), REVIEW((short) 2, "review");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // FROM_ID
                    1:
                        return FROM_ID;
                    case // REVIEW
                    2:
                        return REVIEW;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FROMID_ISSET_ID = 0;

        private static final int __REVIEW_ISSET_ID = 1;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.REVIEW, new org.apache.thrift.meta_data.FieldMetaData("review", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(servers_args.class, metaDataMap);
        }

        public servers_args() {
        }

        public servers_args(int fromId, boolean review) {
            this();
            this.fromId = fromId;
            setFromIdIsSet(true);
            this.review = review;
            setReviewIsSet(true);
        }

        public servers_args(servers_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.fromId = other.fromId;
            this.review = other.review;
        }

        public servers_args deepCopy() {
            return new servers_args(this);
        }

        @Override
        public void clear() {
            setFromIdIsSet(false);
            this.fromId = 0;
            setReviewIsSet(false);
            this.review = false;
        }

        public int getFromId() {
            return this.fromId;
        }

        public servers_args setFromId(int fromId) {
            this.fromId = fromId;
            setFromIdIsSet(true);
            return this;
        }

        public void unsetFromId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public boolean isSetFromId() {
            return EncodingUtils.testBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public void setFromIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMID_ISSET_ID, value);
        }

        public boolean isReview() {
            return this.review;
        }

        public servers_args setReview(boolean review) {
            this.review = review;
            setReviewIsSet(true);
            return this;
        }

        public void unsetReview() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVIEW_ISSET_ID);
        }

        public boolean isSetReview() {
            return EncodingUtils.testBit(__isset_bitfield, __REVIEW_ISSET_ID);
        }

        public void setReviewIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVIEW_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case FROM_ID:
                    if (value == null) {
                        unsetFromId();
                    } else {
                        setFromId((Integer) value);
                    }
                    break;
                case REVIEW:
                    if (value == null) {
                        unsetReview();
                    } else {
                        setReview((Boolean) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case FROM_ID:
                    return getFromId();
                case REVIEW:
                    return isReview();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case FROM_ID:
                    return isSetFromId();
                case REVIEW:
                    return isSetReview();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof servers_args)
                return this.equals((servers_args) that);
            return false;
        }

        public boolean equals(servers_args that) {
            if (that == null)
                return false;
            boolean this_present_fromId = true;
            boolean that_present_fromId = true;
            if (this_present_fromId || that_present_fromId) {
                if (!(this_present_fromId && that_present_fromId))
                    return false;
                if (this.fromId != that.fromId)
                    return false;
            }
            boolean this_present_review = true;
            boolean that_present_review = true;
            if (this_present_review || that_present_review) {
                if (!(this_present_review && that_present_review))
                    return false;
                if (this.review != that.review)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_fromId = true;
            list.add(present_fromId);
            if (present_fromId)
                list.add(fromId);
            boolean present_review = true;
            list.add(present_review);
            if (present_review)
                list.add(review);
            return list.hashCode();
        }

        @Override
        public int compareTo(servers_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFromId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetReview()).compareTo(other.isSetReview());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReview()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.review, other.review);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("servers_args(");
            boolean first = true;
            sb.append("fromId:");
            sb.append(this.fromId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("review:");
            sb.append(this.review);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class servers_argsStandardSchemeFactory implements SchemeFactory {

            public servers_argsStandardScheme getScheme() {
                return new servers_argsStandardScheme();
            }
        }

        private static class servers_argsStandardScheme extends StandardScheme<servers_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, servers_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // FROM_ID
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fromId = iprot.readI32();
                                struct.setFromIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // REVIEW
                        2:
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.review = iprot.readBool();
                                struct.setReviewIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, servers_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
                oprot.writeI32(struct.fromId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(REVIEW_FIELD_DESC);
                oprot.writeBool(struct.review);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class servers_argsTupleSchemeFactory implements SchemeFactory {

            public servers_argsTupleScheme getScheme() {
                return new servers_argsTupleScheme();
            }
        }

        private static class servers_argsTupleScheme extends TupleScheme<servers_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, servers_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFromId()) {
                    optionals.set(0);
                }
                if (struct.isSetReview()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetFromId()) {
                    oprot.writeI32(struct.fromId);
                }
                if (struct.isSetReview()) {
                    oprot.writeBool(struct.review);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, servers_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.fromId = iprot.readI32();
                    struct.setFromIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.review = iprot.readBool();
                    struct.setReviewIsSet(true);
                }
            }
        }
    }

    public static class servers_result implements org.apache.thrift.TBase<servers_result, servers_result._Fields>, java.io.Serializable, Cloneable, Comparable<servers_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("servers_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new servers_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new servers_resultTupleSchemeFactory());
        }

        // required
        public List<DServer> success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DServer.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(servers_result.class, metaDataMap);
        }

        public servers_result() {
        }

        public servers_result(List<DServer> success) {
            this();
            this.success = success;
        }

        public servers_result(servers_result other) {
            if (other.isSetSuccess()) {
                List<DServer> __this__success = new ArrayList<DServer>(other.success.size());
                for (DServer other_element : other.success) {
                    __this__success.add(new DServer(other_element));
                }
                this.success = __this__success;
            }
        }

        public servers_result deepCopy() {
            return new servers_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<DServer> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(DServer elem) {
            if (this.success == null) {
                this.success = new ArrayList<DServer>();
            }
            this.success.add(elem);
        }

        public List<DServer> getSuccess() {
            return this.success;
        }

        public servers_result setSuccess(List<DServer> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<DServer>) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof servers_result)
                return this.equals((servers_result) that);
            return false;
        }

        public boolean equals(servers_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);
            return list.hashCode();
        }

        @Override
        public int compareTo(servers_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("servers_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class servers_resultStandardSchemeFactory implements SchemeFactory {

            public servers_resultStandardScheme getScheme() {
                return new servers_resultStandardScheme();
            }
        }

        private static class servers_resultStandardScheme extends StandardScheme<servers_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, servers_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                                    struct.success = new ArrayList<DServer>(_list16.size);
                                    DServer _elem17;
                                    for (int _i18 = 0; _i18 < _list16.size; ++_i18) {
                                        _elem17 = new DServer();
                                        _elem17.read(iprot);
                                        struct.success.add(_elem17);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, servers_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (DServer _iter19 : struct.success) {
                            _iter19.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class servers_resultTupleSchemeFactory implements SchemeFactory {

            public servers_resultTupleScheme getScheme() {
                return new servers_resultTupleScheme();
            }
        }

        private static class servers_resultTupleScheme extends TupleScheme<servers_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, servers_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (DServer _iter20 : struct.success) {
                            _iter20.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, servers_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<DServer>(_list21.size);
                        DServer _elem22;
                        for (int _i23 = 0; _i23 < _list21.size; ++_i23) {
                            _elem22 = new DServer();
                            _elem22.read(iprot);
                            struct.success.add(_elem22);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class identity_args implements org.apache.thrift.TBase<identity_args, identity_args._Fields>, java.io.Serializable, Cloneable, Comparable<identity_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("identity_args");

        private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromId", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.protocol.TField IDENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("identities", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new identity_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new identity_argsTupleSchemeFactory());
        }

        // required
        public int fromId;

        // required
        public long serverId;

        // required
        public String identities;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FROM_ID((short) 1, "fromId"), SERVER_ID((short) 2, "serverId"), IDENTITIES((short) 3, "identities");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // FROM_ID
                    1:
                        return FROM_ID;
                    case // SERVER_ID
                    2:
                        return SERVER_ID;
                    case // IDENTITIES
                    3:
                        return IDENTITIES;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FROMID_ISSET_ID = 0;

        private static final int __SERVERID_ISSET_ID = 1;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.IDENTITIES, new org.apache.thrift.meta_data.FieldMetaData("identities", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(identity_args.class, metaDataMap);
        }

        public identity_args() {
        }

        public identity_args(int fromId, long serverId, String identities) {
            this();
            this.fromId = fromId;
            setFromIdIsSet(true);
            this.serverId = serverId;
            setServerIdIsSet(true);
            this.identities = identities;
        }

        public identity_args(identity_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.fromId = other.fromId;
            this.serverId = other.serverId;
            if (other.isSetIdentities()) {
                this.identities = other.identities;
            }
        }

        public identity_args deepCopy() {
            return new identity_args(this);
        }

        @Override
        public void clear() {
            setFromIdIsSet(false);
            this.fromId = 0;
            setServerIdIsSet(false);
            this.serverId = 0;
            this.identities = null;
        }

        public int getFromId() {
            return this.fromId;
        }

        public identity_args setFromId(int fromId) {
            this.fromId = fromId;
            setFromIdIsSet(true);
            return this;
        }

        public void unsetFromId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public boolean isSetFromId() {
            return EncodingUtils.testBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public void setFromIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMID_ISSET_ID, value);
        }

        public long getServerId() {
            return this.serverId;
        }

        public identity_args setServerId(long serverId) {
            this.serverId = serverId;
            setServerIdIsSet(true);
            return this;
        }

        public void unsetServerId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
        }

        /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
        public boolean isSetServerId() {
            return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
        }

        public void setServerIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
        }

        public String getIdentities() {
            return this.identities;
        }

        public identity_args setIdentities(String identities) {
            this.identities = identities;
            return this;
        }

        public void unsetIdentities() {
            this.identities = null;
        }

        /** Returns true if field identities is set (has been assigned a value) and false otherwise */
        public boolean isSetIdentities() {
            return this.identities != null;
        }

        public void setIdentitiesIsSet(boolean value) {
            if (!value) {
                this.identities = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case FROM_ID:
                    if (value == null) {
                        unsetFromId();
                    } else {
                        setFromId((Integer) value);
                    }
                    break;
                case SERVER_ID:
                    if (value == null) {
                        unsetServerId();
                    } else {
                        setServerId((Long) value);
                    }
                    break;
                case IDENTITIES:
                    if (value == null) {
                        unsetIdentities();
                    } else {
                        setIdentities((String) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case FROM_ID:
                    return getFromId();
                case SERVER_ID:
                    return getServerId();
                case IDENTITIES:
                    return getIdentities();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case FROM_ID:
                    return isSetFromId();
                case SERVER_ID:
                    return isSetServerId();
                case IDENTITIES:
                    return isSetIdentities();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof identity_args)
                return this.equals((identity_args) that);
            return false;
        }

        public boolean equals(identity_args that) {
            if (that == null)
                return false;
            boolean this_present_fromId = true;
            boolean that_present_fromId = true;
            if (this_present_fromId || that_present_fromId) {
                if (!(this_present_fromId && that_present_fromId))
                    return false;
                if (this.fromId != that.fromId)
                    return false;
            }
            boolean this_present_serverId = true;
            boolean that_present_serverId = true;
            if (this_present_serverId || that_present_serverId) {
                if (!(this_present_serverId && that_present_serverId))
                    return false;
                if (this.serverId != that.serverId)
                    return false;
            }
            boolean this_present_identities = true && this.isSetIdentities();
            boolean that_present_identities = true && that.isSetIdentities();
            if (this_present_identities || that_present_identities) {
                if (!(this_present_identities && that_present_identities))
                    return false;
                if (!this.identities.equals(that.identities))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_fromId = true;
            list.add(present_fromId);
            if (present_fromId)
                list.add(fromId);
            boolean present_serverId = true;
            list.add(present_serverId);
            if (present_serverId)
                list.add(serverId);
            boolean present_identities = true && (isSetIdentities());
            list.add(present_identities);
            if (present_identities)
                list.add(identities);
            return list.hashCode();
        }

        @Override
        public int compareTo(identity_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFromId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetServerId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetIdentities()).compareTo(other.isSetIdentities());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIdentities()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identities, other.identities);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("identity_args(");
            boolean first = true;
            sb.append("fromId:");
            sb.append(this.fromId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("serverId:");
            sb.append(this.serverId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("identities:");
            if (this.identities == null) {
                sb.append("null");
            } else {
                sb.append(this.identities);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class identity_argsStandardSchemeFactory implements SchemeFactory {

            public identity_argsStandardScheme getScheme() {
                return new identity_argsStandardScheme();
            }
        }

        private static class identity_argsStandardScheme extends StandardScheme<identity_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, identity_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // FROM_ID
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fromId = iprot.readI32();
                                struct.setFromIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // SERVER_ID
                        2:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.serverId = iprot.readI64();
                                struct.setServerIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // IDENTITIES
                        3:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.identities = iprot.readString();
                                struct.setIdentitiesIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, identity_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
                oprot.writeI32(struct.fromId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
                oprot.writeI64(struct.serverId);
                oprot.writeFieldEnd();
                if (struct.identities != null) {
                    oprot.writeFieldBegin(IDENTITIES_FIELD_DESC);
                    oprot.writeString(struct.identities);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class identity_argsTupleSchemeFactory implements SchemeFactory {

            public identity_argsTupleScheme getScheme() {
                return new identity_argsTupleScheme();
            }
        }

        private static class identity_argsTupleScheme extends TupleScheme<identity_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, identity_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFromId()) {
                    optionals.set(0);
                }
                if (struct.isSetServerId()) {
                    optionals.set(1);
                }
                if (struct.isSetIdentities()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetFromId()) {
                    oprot.writeI32(struct.fromId);
                }
                if (struct.isSetServerId()) {
                    oprot.writeI64(struct.serverId);
                }
                if (struct.isSetIdentities()) {
                    oprot.writeString(struct.identities);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, identity_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.fromId = iprot.readI32();
                    struct.setFromIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.serverId = iprot.readI64();
                    struct.setServerIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.identities = iprot.readString();
                    struct.setIdentitiesIsSet(true);
                }
            }
        }
    }

    public static class identity_result implements org.apache.thrift.TBase<identity_result, identity_result._Fields>, java.io.Serializable, Cloneable, Comparable<identity_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("identity_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new identity_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new identity_resultTupleSchemeFactory());
        }

        // required
        public DIdentityResult success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DIdentityResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(identity_result.class, metaDataMap);
        }

        public identity_result() {
        }

        public identity_result(DIdentityResult success) {
            this();
            this.success = success;
        }

        public identity_result(identity_result other) {
            if (other.isSetSuccess()) {
                this.success = new DIdentityResult(other.success);
            }
        }

        public identity_result deepCopy() {
            return new identity_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public DIdentityResult getSuccess() {
            return this.success;
        }

        public identity_result setSuccess(DIdentityResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((DIdentityResult) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof identity_result)
                return this.equals((identity_result) that);
            return false;
        }

        public boolean equals(identity_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);
            return list.hashCode();
        }

        @Override
        public int compareTo(identity_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("identity_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class identity_resultStandardSchemeFactory implements SchemeFactory {

            public identity_resultStandardScheme getScheme() {
                return new identity_resultStandardScheme();
            }
        }

        private static class identity_resultStandardScheme extends StandardScheme<identity_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, identity_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new DIdentityResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, identity_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class identity_resultTupleSchemeFactory implements SchemeFactory {

            public identity_resultTupleScheme getScheme() {
                return new identity_resultTupleScheme();
            }
        }

        private static class identity_resultTupleScheme extends TupleScheme<identity_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, identity_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, identity_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new DIdentityResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

        private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromId", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
        }

        // required
        public int fromId;

        // required
        public long serverId;

        // required
        public String username;

        // required
        public String password;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FROM_ID((short) 1, "fromId"), SERVER_ID((short) 2, "serverId"), USERNAME((short) 3, "username"), PASSWORD((short) 4, "password");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // FROM_ID
                    1:
                        return FROM_ID;
                    case // SERVER_ID
                    2:
                        return SERVER_ID;
                    case // USERNAME
                    3:
                        return USERNAME;
                    case // PASSWORD
                    4:
                        return PASSWORD;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FROMID_ISSET_ID = 0;

        private static final int __SERVERID_ISSET_ID = 1;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
        }

        public login_args() {
        }

        public login_args(int fromId, long serverId, String username, String password) {
            this();
            this.fromId = fromId;
            setFromIdIsSet(true);
            this.serverId = serverId;
            setServerIdIsSet(true);
            this.username = username;
            this.password = password;
        }

        public login_args(login_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.fromId = other.fromId;
            this.serverId = other.serverId;
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetPassword()) {
                this.password = other.password;
            }
        }

        public login_args deepCopy() {
            return new login_args(this);
        }

        @Override
        public void clear() {
            setFromIdIsSet(false);
            this.fromId = 0;
            setServerIdIsSet(false);
            this.serverId = 0;
            this.username = null;
            this.password = null;
        }

        public int getFromId() {
            return this.fromId;
        }

        public login_args setFromId(int fromId) {
            this.fromId = fromId;
            setFromIdIsSet(true);
            return this;
        }

        public void unsetFromId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public boolean isSetFromId() {
            return EncodingUtils.testBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public void setFromIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMID_ISSET_ID, value);
        }

        public long getServerId() {
            return this.serverId;
        }

        public login_args setServerId(long serverId) {
            this.serverId = serverId;
            setServerIdIsSet(true);
            return this;
        }

        public void unsetServerId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
        }

        public boolean isSetServerId() {
            return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
        }

        public void setServerIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
        }

        public String getUsername() {
            return this.username;
        }

        public login_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /** Returns true if field username is set (has been assigned a value) and false otherwise */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getPassword() {
            return this.password;
        }

        public login_args setPassword(String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        /** Returns true if field password is set (has been assigned a value) and false otherwise */
        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case FROM_ID:
                    if (value == null) {
                        unsetFromId();
                    } else {
                        setFromId((Integer) value);
                    }
                    break;
                case SERVER_ID:
                    if (value == null) {
                        unsetServerId();
                    } else {
                        setServerId((Long) value);
                    }
                    break;
                case USERNAME:
                    if (value == null) {
                        unsetUsername();
                    } else {
                        setUsername((String) value);
                    }
                    break;
                case PASSWORD:
                    if (value == null) {
                        unsetPassword();
                    } else {
                        setPassword((String) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case FROM_ID:
                    return getFromId();
                case SERVER_ID:
                    return getServerId();
                case USERNAME:
                    return getUsername();
                case PASSWORD:
                    return getPassword();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case FROM_ID:
                    return isSetFromId();
                case SERVER_ID:
                    return isSetServerId();
                case USERNAME:
                    return isSetUsername();
                case PASSWORD:
                    return isSetPassword();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof login_args)
                return this.equals((login_args) that);
            return false;
        }

        public boolean equals(login_args that) {
            if (that == null)
                return false;
            boolean this_present_fromId = true;
            boolean that_present_fromId = true;
            if (this_present_fromId || that_present_fromId) {
                if (!(this_present_fromId && that_present_fromId))
                    return false;
                if (this.fromId != that.fromId)
                    return false;
            }
            boolean this_present_serverId = true;
            boolean that_present_serverId = true;
            if (this_present_serverId || that_present_serverId) {
                if (!(this_present_serverId && that_present_serverId))
                    return false;
                if (this.serverId != that.serverId)
                    return false;
            }
            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }
            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_fromId = true;
            list.add(present_fromId);
            if (present_fromId)
                list.add(fromId);
            boolean present_serverId = true;
            list.add(present_serverId);
            if (present_serverId)
                list.add(serverId);
            boolean present_username = true && (isSetUsername());
            list.add(present_username);
            if (present_username)
                list.add(username);
            boolean present_password = true && (isSetPassword());
            list.add(present_password);
            if (present_password)
                list.add(password);
            return list.hashCode();
        }

        @Override
        public int compareTo(login_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFromId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetServerId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("login_args(");
            boolean first = true;
            sb.append("fromId:");
            sb.append(this.fromId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("serverId:");
            sb.append(this.serverId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class login_argsStandardSchemeFactory implements SchemeFactory {

            public login_argsStandardScheme getScheme() {
                return new login_argsStandardScheme();
            }
        }

        private static class login_argsStandardScheme extends StandardScheme<login_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // FROM_ID
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fromId = iprot.readI32();
                                struct.setFromIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // SERVER_ID
                        2:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.serverId = iprot.readI64();
                                struct.setServerIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // USERNAME
                        3:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.username = iprot.readString();
                                struct.setUsernameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // PASSWORD
                        4:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.password = iprot.readString();
                                struct.setPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
                oprot.writeI32(struct.fromId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
                oprot.writeI64(struct.serverId);
                oprot.writeFieldEnd();
                if (struct.username != null) {
                    oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                    oprot.writeString(struct.username);
                    oprot.writeFieldEnd();
                }
                if (struct.password != null) {
                    oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.password);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class login_argsTupleSchemeFactory implements SchemeFactory {

            public login_argsTupleScheme getScheme() {
                return new login_argsTupleScheme();
            }
        }

        private static class login_argsTupleScheme extends TupleScheme<login_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFromId()) {
                    optionals.set(0);
                }
                if (struct.isSetServerId()) {
                    optionals.set(1);
                }
                if (struct.isSetUsername()) {
                    optionals.set(2);
                }
                if (struct.isSetPassword()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetFromId()) {
                    oprot.writeI32(struct.fromId);
                }
                if (struct.isSetServerId()) {
                    oprot.writeI64(struct.serverId);
                }
                if (struct.isSetUsername()) {
                    oprot.writeString(struct.username);
                }
                if (struct.isSetPassword()) {
                    oprot.writeString(struct.password);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.fromId = iprot.readI32();
                    struct.setFromIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.serverId = iprot.readI64();
                    struct.setServerIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.username = iprot.readString();
                    struct.setUsernameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.password = iprot.readString();
                    struct.setPasswordIsSet(true);
                }
            }
        }
    }

    public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
        }

        // required
        public DLoginResult success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DLoginResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
        }

        public login_result() {
        }

        public login_result(DLoginResult success) {
            this();
            this.success = success;
        }

        public login_result(login_result other) {
            if (other.isSetSuccess()) {
                this.success = new DLoginResult(other.success);
            }
        }

        public login_result deepCopy() {
            return new login_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public DLoginResult getSuccess() {
            return this.success;
        }

        public login_result setSuccess(DLoginResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((DLoginResult) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof login_result)
                return this.equals((login_result) that);
            return false;
        }

        public boolean equals(login_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);
            return list.hashCode();
        }

        @Override
        public int compareTo(login_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("login_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class login_resultStandardSchemeFactory implements SchemeFactory {

            public login_resultStandardScheme getScheme() {
                return new login_resultStandardScheme();
            }
        }

        private static class login_resultStandardScheme extends StandardScheme<login_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new DLoginResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class login_resultTupleSchemeFactory implements SchemeFactory {

            public login_resultTupleScheme getScheme() {
                return new login_resultTupleScheme();
            }
        }

        private static class login_resultTupleScheme extends TupleScheme<login_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new DLoginResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class sign_args implements org.apache.thrift.TBase<sign_args, sign_args._Fields>, java.io.Serializable, Cloneable, Comparable<sign_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sign_args");

        private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromId", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new sign_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sign_argsTupleSchemeFactory());
        }

        // required
        public int fromId;

        // required
        public long serverId;

        // required
        public String username;

        // required
        public String password;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            FROM_ID((short) 1, "fromId"), SERVER_ID((short) 2, "serverId"), USERNAME((short) 3, "username"), PASSWORD((short) 4, "password");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // FROM_ID
                    1:
                        return FROM_ID;
                    case // SERVER_ID
                    2:
                        return SERVER_ID;
                    case // USERNAME
                    3:
                        return USERNAME;
                    case // PASSWORD
                    4:
                        return PASSWORD;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FROMID_ISSET_ID = 0;

        private static final int __SERVERID_ISSET_ID = 1;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sign_args.class, metaDataMap);
        }

        public sign_args() {
        }

        public sign_args(int fromId, long serverId, String username, String password) {
            this();
            this.fromId = fromId;
            setFromIdIsSet(true);
            this.serverId = serverId;
            setServerIdIsSet(true);
            this.username = username;
            this.password = password;
        }

        public sign_args(sign_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.fromId = other.fromId;
            this.serverId = other.serverId;
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetPassword()) {
                this.password = other.password;
            }
        }

        public sign_args deepCopy() {
            return new sign_args(this);
        }

        @Override
        public void clear() {
            setFromIdIsSet(false);
            this.fromId = 0;
            setServerIdIsSet(false);
            this.serverId = 0;
            this.username = null;
            this.password = null;
        }

        public int getFromId() {
            return this.fromId;
        }

        public sign_args setFromId(int fromId) {
            this.fromId = fromId;
            setFromIdIsSet(true);
            return this;
        }

        public void unsetFromId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public boolean isSetFromId() {
            return EncodingUtils.testBit(__isset_bitfield, __FROMID_ISSET_ID);
        }

        public void setFromIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMID_ISSET_ID, value);
        }

        public long getServerId() {
            return this.serverId;
        }

        public sign_args setServerId(long serverId) {
            this.serverId = serverId;
            setServerIdIsSet(true);
            return this;
        }

        public void unsetServerId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
        }

        public boolean isSetServerId() {
            return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
        }

        public void setServerIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
        }

        public String getUsername() {
            return this.username;
        }

        public sign_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getPassword() {
            return this.password;
        }

        public sign_args setPassword(String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case FROM_ID:
                    if (value == null) {
                        unsetFromId();
                    } else {
                        setFromId((Integer) value);
                    }
                    break;
                case SERVER_ID:
                    if (value == null) {
                        unsetServerId();
                    } else {
                        setServerId((Long) value);
                    }
                    break;
                case USERNAME:
                    if (value == null) {
                        unsetUsername();
                    } else {
                        setUsername((String) value);
                    }
                    break;
                case PASSWORD:
                    if (value == null) {
                        unsetPassword();
                    } else {
                        setPassword((String) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case FROM_ID:
                    return getFromId();
                case SERVER_ID:
                    return getServerId();
                case USERNAME:
                    return getUsername();
                case PASSWORD:
                    return getPassword();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case FROM_ID:
                    return isSetFromId();
                case SERVER_ID:
                    return isSetServerId();
                case USERNAME:
                    return isSetUsername();
                case PASSWORD:
                    return isSetPassword();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sign_args)
                return this.equals((sign_args) that);
            return false;
        }

        public boolean equals(sign_args that) {
            if (that == null)
                return false;
            boolean this_present_fromId = true;
            boolean that_present_fromId = true;
            if (this_present_fromId || that_present_fromId) {
                if (!(this_present_fromId && that_present_fromId))
                    return false;
                if (this.fromId != that.fromId)
                    return false;
            }
            boolean this_present_serverId = true;
            boolean that_present_serverId = true;
            if (this_present_serverId || that_present_serverId) {
                if (!(this_present_serverId && that_present_serverId))
                    return false;
                if (this.serverId != that.serverId)
                    return false;
            }
            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }
            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_fromId = true;
            list.add(present_fromId);
            if (present_fromId)
                list.add(fromId);
            boolean present_serverId = true;
            list.add(present_serverId);
            if (present_serverId)
                list.add(serverId);
            boolean present_username = true && (isSetUsername());
            list.add(present_username);
            if (present_username)
                list.add(username);
            boolean present_password = true && (isSetPassword());
            list.add(present_password);
            if (present_password)
                list.add(password);
            return list.hashCode();
        }

        @Override
        public int compareTo(sign_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFromId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetServerId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sign_args(");
            boolean first = true;
            sb.append("fromId:");
            sb.append(this.fromId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("serverId:");
            sb.append(this.serverId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sign_argsStandardSchemeFactory implements SchemeFactory {

            public sign_argsStandardScheme getScheme() {
                return new sign_argsStandardScheme();
            }
        }

        private static class sign_argsStandardScheme extends StandardScheme<sign_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sign_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // FROM_ID
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fromId = iprot.readI32();
                                struct.setFromIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // SERVER_ID
                        2:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.serverId = iprot.readI64();
                                struct.setServerIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // USERNAME
                        3:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.username = iprot.readString();
                                struct.setUsernameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // PASSWORD
                        4:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.password = iprot.readString();
                                struct.setPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sign_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
                oprot.writeI32(struct.fromId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
                oprot.writeI64(struct.serverId);
                oprot.writeFieldEnd();
                if (struct.username != null) {
                    oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                    oprot.writeString(struct.username);
                    oprot.writeFieldEnd();
                }
                if (struct.password != null) {
                    oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.password);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class sign_argsTupleSchemeFactory implements SchemeFactory {

            public sign_argsTupleScheme getScheme() {
                return new sign_argsTupleScheme();
            }
        }

        private static class sign_argsTupleScheme extends TupleScheme<sign_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sign_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFromId()) {
                    optionals.set(0);
                }
                if (struct.isSetServerId()) {
                    optionals.set(1);
                }
                if (struct.isSetUsername()) {
                    optionals.set(2);
                }
                if (struct.isSetPassword()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetFromId()) {
                    oprot.writeI32(struct.fromId);
                }
                if (struct.isSetServerId()) {
                    oprot.writeI64(struct.serverId);
                }
                if (struct.isSetUsername()) {
                    oprot.writeString(struct.username);
                }
                if (struct.isSetPassword()) {
                    oprot.writeString(struct.password);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sign_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.fromId = iprot.readI32();
                    struct.setFromIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.serverId = iprot.readI64();
                    struct.setServerIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.username = iprot.readString();
                    struct.setUsernameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.password = iprot.readString();
                    struct.setPasswordIsSet(true);
                }
            }
        }
    }

    public static class sign_result implements org.apache.thrift.TBase<sign_result, sign_result._Fields>, java.io.Serializable, Cloneable, Comparable<sign_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sign_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new sign_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sign_resultTupleSchemeFactory());
        }

        // required
        public DRegisterResult success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DRegisterResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sign_result.class, metaDataMap);
        }

        public sign_result() {
        }

        public sign_result(DRegisterResult success) {
            this();
            this.success = success;
        }

        public sign_result(sign_result other) {
            if (other.isSetSuccess()) {
                this.success = new DRegisterResult(other.success);
            }
        }

        public sign_result deepCopy() {
            return new sign_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public DRegisterResult getSuccess() {
            return this.success;
        }

        public sign_result setSuccess(DRegisterResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((DRegisterResult) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sign_result)
                return this.equals((sign_result) that);
            return false;
        }

        public boolean equals(sign_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);
            return list.hashCode();
        }

        @Override
        public int compareTo(sign_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sign_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class sign_resultStandardSchemeFactory implements SchemeFactory {

            public sign_resultStandardScheme getScheme() {
                return new sign_resultStandardScheme();
            }
        }

        private static class sign_resultStandardScheme extends StandardScheme<sign_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sign_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new DRegisterResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sign_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class sign_resultTupleSchemeFactory implements SchemeFactory {

            public sign_resultTupleScheme getScheme() {
                return new sign_resultTupleScheme();
            }
        }

        private static class sign_resultTupleScheme extends TupleScheme<sign_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sign_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sign_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new DRegisterResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class password_args implements org.apache.thrift.TBase<password_args, password_args._Fields>, java.io.Serializable, Cloneable, Comparable<password_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("password_args");

        private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField OLD_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPassword", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.protocol.TField NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPassword", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new password_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new password_argsTupleSchemeFactory());
        }

        // required
        public String sessionId;

        // required
        public String oldPassword;

        // required
        public String newPassword;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SESSION_ID((short) 1, "sessionId"), OLD_PASSWORD((short) 2, "oldPassword"), NEW_PASSWORD((short) 3, "newPassword");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SESSION_ID
                    1:
                        return SESSION_ID;
                    case // OLD_PASSWORD
                    2:
                        return OLD_PASSWORD;
                    case // NEW_PASSWORD
                    3:
                        return NEW_PASSWORD;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OLD_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("oldPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("newPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(password_args.class, metaDataMap);
        }

        public password_args() {
        }

        public password_args(String sessionId, String oldPassword, String newPassword) {
            this();
            this.sessionId = sessionId;
            this.oldPassword = oldPassword;
            this.newPassword = newPassword;
        }

        public password_args(password_args other) {
            if (other.isSetSessionId()) {
                this.sessionId = other.sessionId;
            }
            if (other.isSetOldPassword()) {
                this.oldPassword = other.oldPassword;
            }
            if (other.isSetNewPassword()) {
                this.newPassword = other.newPassword;
            }
        }

        public password_args deepCopy() {
            return new password_args(this);
        }

        @Override
        public void clear() {
            this.sessionId = null;
            this.oldPassword = null;
            this.newPassword = null;
        }

        public String getSessionId() {
            return this.sessionId;
        }

        public password_args setSessionId(String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public void unsetSessionId() {
            this.sessionId = null;
        }

        /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
        public boolean isSetSessionId() {
            return this.sessionId != null;
        }

        public void setSessionIdIsSet(boolean value) {
            if (!value) {
                this.sessionId = null;
            }
        }

        public String getOldPassword() {
            return this.oldPassword;
        }

        public password_args setOldPassword(String oldPassword) {
            this.oldPassword = oldPassword;
            return this;
        }

        public void unsetOldPassword() {
            this.oldPassword = null;
        }

        /** Returns true if field oldPassword is set (has been assigned a value) and false otherwise */
        public boolean isSetOldPassword() {
            return this.oldPassword != null;
        }

        public void setOldPasswordIsSet(boolean value) {
            if (!value) {
                this.oldPassword = null;
            }
        }

        public String getNewPassword() {
            return this.newPassword;
        }

        public password_args setNewPassword(String newPassword) {
            this.newPassword = newPassword;
            return this;
        }

        public void unsetNewPassword() {
            this.newPassword = null;
        }

        /** Returns true if field newPassword is set (has been assigned a value) and false otherwise */
        public boolean isSetNewPassword() {
            return this.newPassword != null;
        }

        public void setNewPasswordIsSet(boolean value) {
            if (!value) {
                this.newPassword = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SESSION_ID:
                    if (value == null) {
                        unsetSessionId();
                    } else {
                        setSessionId((String) value);
                    }
                    break;
                case OLD_PASSWORD:
                    if (value == null) {
                        unsetOldPassword();
                    } else {
                        setOldPassword((String) value);
                    }
                    break;
                case NEW_PASSWORD:
                    if (value == null) {
                        unsetNewPassword();
                    } else {
                        setNewPassword((String) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SESSION_ID:
                    return getSessionId();
                case OLD_PASSWORD:
                    return getOldPassword();
                case NEW_PASSWORD:
                    return getNewPassword();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SESSION_ID:
                    return isSetSessionId();
                case OLD_PASSWORD:
                    return isSetOldPassword();
                case NEW_PASSWORD:
                    return isSetNewPassword();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof password_args)
                return this.equals((password_args) that);
            return false;
        }

        public boolean equals(password_args that) {
            if (that == null)
                return false;
            boolean this_present_sessionId = true && this.isSetSessionId();
            boolean that_present_sessionId = true && that.isSetSessionId();
            if (this_present_sessionId || that_present_sessionId) {
                if (!(this_present_sessionId && that_present_sessionId))
                    return false;
                if (!this.sessionId.equals(that.sessionId))
                    return false;
            }
            boolean this_present_oldPassword = true && this.isSetOldPassword();
            boolean that_present_oldPassword = true && that.isSetOldPassword();
            if (this_present_oldPassword || that_present_oldPassword) {
                if (!(this_present_oldPassword && that_present_oldPassword))
                    return false;
                if (!this.oldPassword.equals(that.oldPassword))
                    return false;
            }
            boolean this_present_newPassword = true && this.isSetNewPassword();
            boolean that_present_newPassword = true && that.isSetNewPassword();
            if (this_present_newPassword || that_present_newPassword) {
                if (!(this_present_newPassword && that_present_newPassword))
                    return false;
                if (!this.newPassword.equals(that.newPassword))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_sessionId = true && (isSetSessionId());
            list.add(present_sessionId);
            if (present_sessionId)
                list.add(sessionId);
            boolean present_oldPassword = true && (isSetOldPassword());
            list.add(present_oldPassword);
            if (present_oldPassword)
                list.add(oldPassword);
            boolean present_newPassword = true && (isSetNewPassword());
            list.add(present_newPassword);
            if (present_newPassword)
                list.add(newPassword);
            return list.hashCode();
        }

        @Override
        public int compareTo(password_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSessionId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOldPassword()).compareTo(other.isSetOldPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOldPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPassword, other.oldPassword);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetNewPassword()).compareTo(other.isSetNewPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetNewPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPassword, other.newPassword);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("password_args(");
            boolean first = true;
            sb.append("sessionId:");
            if (this.sessionId == null) {
                sb.append("null");
            } else {
                sb.append(this.sessionId);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("oldPassword:");
            if (this.oldPassword == null) {
                sb.append("null");
            } else {
                sb.append(this.oldPassword);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("newPassword:");
            if (this.newPassword == null) {
                sb.append("null");
            } else {
                sb.append(this.newPassword);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class password_argsStandardSchemeFactory implements SchemeFactory {

            public password_argsStandardScheme getScheme() {
                return new password_argsStandardScheme();
            }
        }

        private static class password_argsStandardScheme extends StandardScheme<password_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, password_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SESSION_ID
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.sessionId = iprot.readString();
                                struct.setSessionIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // OLD_PASSWORD
                        2:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.oldPassword = iprot.readString();
                                struct.setOldPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case // NEW_PASSWORD
                        3:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.newPassword = iprot.readString();
                                struct.setNewPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, password_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.sessionId != null) {
                    oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
                    oprot.writeString(struct.sessionId);
                    oprot.writeFieldEnd();
                }
                if (struct.oldPassword != null) {
                    oprot.writeFieldBegin(OLD_PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.oldPassword);
                    oprot.writeFieldEnd();
                }
                if (struct.newPassword != null) {
                    oprot.writeFieldBegin(NEW_PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.newPassword);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class password_argsTupleSchemeFactory implements SchemeFactory {

            public password_argsTupleScheme getScheme() {
                return new password_argsTupleScheme();
            }
        }

        private static class password_argsTupleScheme extends TupleScheme<password_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, password_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSessionId()) {
                    optionals.set(0);
                }
                if (struct.isSetOldPassword()) {
                    optionals.set(1);
                }
                if (struct.isSetNewPassword()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSessionId()) {
                    oprot.writeString(struct.sessionId);
                }
                if (struct.isSetOldPassword()) {
                    oprot.writeString(struct.oldPassword);
                }
                if (struct.isSetNewPassword()) {
                    oprot.writeString(struct.newPassword);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, password_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.sessionId = iprot.readString();
                    struct.setSessionIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.oldPassword = iprot.readString();
                    struct.setOldPasswordIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.newPassword = iprot.readString();
                    struct.setNewPasswordIsSet(true);
                }
            }
        }
    }

    public static class password_result implements org.apache.thrift.TBase<password_result, password_result._Fields>, java.io.Serializable, Cloneable, Comparable<password_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("password_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new password_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new password_resultTupleSchemeFactory());
        }

        // required
        public EPasswordResult success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
       * 
       * @see EPasswordResult
       */
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EPasswordResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(password_result.class, metaDataMap);
        }

        public password_result() {
        }

        public password_result(EPasswordResult success) {
            this();
            this.success = success;
        }

        public password_result(password_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public password_result deepCopy() {
            return new password_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        /**
     * 
     * @see EPasswordResult
     */
        public EPasswordResult getSuccess() {
            return this.success;
        }

        /**
     * 
     * @see EPasswordResult
     */
        public password_result setSuccess(EPasswordResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((EPasswordResult) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof password_result)
                return this.equals((password_result) that);
            return false;
        }

        public boolean equals(password_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success.getValue());
            return list.hashCode();
        }

        @Override
        public int compareTo(password_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("password_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class password_resultStandardSchemeFactory implements SchemeFactory {

            public password_resultStandardScheme getScheme() {
                return new password_resultStandardScheme();
            }
        }

        private static class password_resultStandardScheme extends StandardScheme<password_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, password_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = tplatform.EPasswordResult.findByValue(iprot.readI32());
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, password_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class password_resultTupleSchemeFactory implements SchemeFactory {

            public password_resultTupleScheme getScheme() {
                return new password_resultTupleScheme();
            }
        }

        private static class password_resultTupleScheme extends TupleScheme<password_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, password_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success.getValue());
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, password_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = tplatform.EPasswordResult.findByValue(iprot.readI32());
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class order_args implements org.apache.thrift.TBase<order_args, order_args._Fields>, java.io.Serializable, Cloneable, Comparable<order_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("order_args");

        private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new order_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new order_argsTupleSchemeFactory());
        }

        // required
        public DOrderInfo info;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            INFO((short) 1, "info");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // INFO
                    1:
                        return INFO;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DOrderInfo.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(order_args.class, metaDataMap);
        }

        public order_args() {
        }

        public order_args(DOrderInfo info) {
            this();
            this.info = info;
        }

        public order_args(order_args other) {
            if (other.isSetInfo()) {
                this.info = new DOrderInfo(other.info);
            }
        }

        public order_args deepCopy() {
            return new order_args(this);
        }

        @Override
        public void clear() {
            this.info = null;
        }

        public DOrderInfo getInfo() {
            return this.info;
        }

        public order_args setInfo(DOrderInfo info) {
            this.info = info;
            return this;
        }

        public void unsetInfo() {
            this.info = null;
        }

        /** Returns true if field info is set (has been assigned a value) and false otherwise */
        public boolean isSetInfo() {
            return this.info != null;
        }

        public void setInfoIsSet(boolean value) {
            if (!value) {
                this.info = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case INFO:
                    if (value == null) {
                        unsetInfo();
                    } else {
                        setInfo((DOrderInfo) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case INFO:
                    return getInfo();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case INFO:
                    return isSetInfo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof order_args)
                return this.equals((order_args) that);
            return false;
        }

        public boolean equals(order_args that) {
            if (that == null)
                return false;
            boolean this_present_info = true && this.isSetInfo();
            boolean that_present_info = true && that.isSetInfo();
            if (this_present_info || that_present_info) {
                if (!(this_present_info && that_present_info))
                    return false;
                if (!this.info.equals(that.info))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_info = true && (isSetInfo());
            list.add(present_info);
            if (present_info)
                list.add(info);
            return list.hashCode();
        }

        @Override
        public int compareTo(order_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("order_args(");
            boolean first = true;
            sb.append("info:");
            if (this.info == null) {
                sb.append("null");
            } else {
                sb.append(this.info);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for sub-struct validity
            if (info != null) {
                info.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class order_argsStandardSchemeFactory implements SchemeFactory {

            public order_argsStandardScheme getScheme() {
                return new order_argsStandardScheme();
            }
        }

        private static class order_argsStandardScheme extends StandardScheme<order_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, order_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // INFO
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.info = new DOrderInfo();
                                struct.info.read(iprot);
                                struct.setInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, order_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.info != null) {
                    oprot.writeFieldBegin(INFO_FIELD_DESC);
                    struct.info.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class order_argsTupleSchemeFactory implements SchemeFactory {

            public order_argsTupleScheme getScheme() {
                return new order_argsTupleScheme();
            }
        }

        private static class order_argsTupleScheme extends TupleScheme<order_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, order_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetInfo()) {
                    struct.info.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, order_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.info = new DOrderInfo();
                    struct.info.read(iprot);
                    struct.setInfoIsSet(true);
                }
            }
        }
    }

    public static class order_result implements org.apache.thrift.TBase<order_result, order_result._Fields>, java.io.Serializable, Cloneable, Comparable<order_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("order_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new order_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new order_resultTupleSchemeFactory());
        }

        // required
        public DOrderResult success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DOrderResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(order_result.class, metaDataMap);
        }

        public order_result() {
        }

        public order_result(DOrderResult success) {
            this();
            this.success = success;
        }

        public order_result(order_result other) {
            if (other.isSetSuccess()) {
                this.success = new DOrderResult(other.success);
            }
        }

        public order_result deepCopy() {
            return new order_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public DOrderResult getSuccess() {
            return this.success;
        }

        public order_result setSuccess(DOrderResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((DOrderResult) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof order_result)
                return this.equals((order_result) that);
            return false;
        }

        public boolean equals(order_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);
            return list.hashCode();
        }

        @Override
        public int compareTo(order_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("order_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class order_resultStandardSchemeFactory implements SchemeFactory {

            public order_resultStandardScheme getScheme() {
                return new order_resultStandardScheme();
            }
        }

        private static class order_resultStandardScheme extends StandardScheme<order_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, order_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new DOrderResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, order_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class order_resultTupleSchemeFactory implements SchemeFactory {

            public order_resultTupleScheme getScheme() {
                return new order_resultTupleScheme();
            }
        }

        private static class order_resultTupleScheme extends TupleScheme<order_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, order_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, order_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new DOrderResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class validate_args implements org.apache.thrift.TBase<validate_args, validate_args._Fields>, java.io.Serializable, Cloneable, Comparable<validate_args> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validate_args");

        private static final org.apache.thrift.protocol.TField VALIDATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("validator", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new validate_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new validate_argsTupleSchemeFactory());
        }

        // required
        public DOrderValidator validator;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            VALIDATOR((short) 1, "validator");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // VALIDATOR
                    1:
                        return VALIDATOR;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VALIDATOR, new org.apache.thrift.meta_data.FieldMetaData("validator", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DOrderValidator.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validate_args.class, metaDataMap);
        }

        public validate_args() {
        }

        public validate_args(DOrderValidator validator) {
            this();
            this.validator = validator;
        }

        public validate_args(validate_args other) {
            if (other.isSetValidator()) {
                this.validator = new DOrderValidator(other.validator);
            }
        }

        public validate_args deepCopy() {
            return new validate_args(this);
        }

        @Override
        public void clear() {
            this.validator = null;
        }

        public DOrderValidator getValidator() {
            return this.validator;
        }

        public validate_args setValidator(DOrderValidator validator) {
            this.validator = validator;
            return this;
        }

        public void unsetValidator() {
            this.validator = null;
        }

        /** Returns true if field validator is set (has been assigned a value) and false otherwise */
        public boolean isSetValidator() {
            return this.validator != null;
        }

        public void setValidatorIsSet(boolean value) {
            if (!value) {
                this.validator = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case VALIDATOR:
                    if (value == null) {
                        unsetValidator();
                    } else {
                        setValidator((DOrderValidator) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case VALIDATOR:
                    return getValidator();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case VALIDATOR:
                    return isSetValidator();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof validate_args)
                return this.equals((validate_args) that);
            return false;
        }

        public boolean equals(validate_args that) {
            if (that == null)
                return false;
            boolean this_present_validator = true && this.isSetValidator();
            boolean that_present_validator = true && that.isSetValidator();
            if (this_present_validator || that_present_validator) {
                if (!(this_present_validator && that_present_validator))
                    return false;
                if (!this.validator.equals(that.validator))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_validator = true && (isSetValidator());
            list.add(present_validator);
            if (present_validator)
                list.add(validator);
            return list.hashCode();
        }

        @Override
        public int compareTo(validate_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetValidator()).compareTo(other.isSetValidator());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetValidator()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validator, other.validator);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("validate_args(");
            boolean first = true;
            sb.append("validator:");
            if (this.validator == null) {
                sb.append("null");
            } else {
                sb.append(this.validator);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for sub-struct validity
            if (validator != null) {
                validator.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class validate_argsStandardSchemeFactory implements SchemeFactory {

            public validate_argsStandardScheme getScheme() {
                return new validate_argsStandardScheme();
            }
        }

        private static class validate_argsStandardScheme extends StandardScheme<validate_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, validate_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // VALIDATOR
                        1:
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.validator = new DOrderValidator();
                                struct.validator.read(iprot);
                                struct.setValidatorIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, validate_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.validator != null) {
                    oprot.writeFieldBegin(VALIDATOR_FIELD_DESC);
                    struct.validator.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class validate_argsTupleSchemeFactory implements SchemeFactory {

            public validate_argsTupleScheme getScheme() {
                return new validate_argsTupleScheme();
            }
        }

        private static class validate_argsTupleScheme extends TupleScheme<validate_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, validate_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetValidator()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetValidator()) {
                    struct.validator.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, validate_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.validator = new DOrderValidator();
                    struct.validator.read(iprot);
                    struct.setValidatorIsSet(true);
                }
            }
        }
    }

    public static class validate_result implements org.apache.thrift.TBase<validate_result, validate_result._Fields>, java.io.Serializable, Cloneable, Comparable<validate_result> {

        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validate_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new validate_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new validate_resultTupleSchemeFactory());
        }

        // required
        public boolean success;

        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case // SUCCESS
                    0:
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validate_result.class, metaDataMap);
        }

        public validate_result() {
        }

        public validate_result(boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        public validate_result(validate_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public validate_result deepCopy() {
            return new validate_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public validate_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch(field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch(field) {
                case SUCCESS:
                    return isSuccess();
            }
            throw new IllegalStateException();
        }

        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch(field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof validate_result)
                return this.equals((validate_result) that);
            return false;
        }

        public boolean equals(validate_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();
            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);
            return list.hashCode();
        }

        @Override
        public int compareTo(validate_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("validate_result(");
            boolean first = true;
            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class validate_resultStandardSchemeFactory implements SchemeFactory {

            public validate_resultStandardScheme getScheme() {
                return new validate_resultStandardScheme();
            }
        }

        private static class validate_resultStandardScheme extends StandardScheme<validate_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, validate_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch(schemeField.id) {
                        case // SUCCESS
                        0:
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, validate_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class validate_resultTupleSchemeFactory implements SchemeFactory {

            public validate_resultTupleScheme getScheme() {
                return new validate_resultTupleScheme();
            }
        }

        private static class validate_resultTupleScheme extends TupleScheme<validate_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, validate_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, validate_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }
}
