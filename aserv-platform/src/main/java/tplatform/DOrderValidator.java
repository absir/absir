/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tplatform;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-09-05")
public class DOrderValidator implements org.apache.thrift.TBase<DOrderValidator, DOrderValidator._Fields>, java.io.Serializable, Cloneable, Comparable<DOrderValidator>, IThrift {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DOrderValidator");

    private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeId", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final org.apache.thrift.protocol.TField CONFIGURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configureId", org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final org.apache.thrift.protocol.TField PLATFORM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("platformData", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final org.apache.thrift.protocol.TField TRADE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeNo", org.apache.thrift.protocol.TType.STRING, (short) 5);

    private static final org.apache.thrift.protocol.TField TRADE_RECEIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeReceipt", org.apache.thrift.protocol.TType.STRING, (short) 6);

    private static final org.apache.thrift.protocol.TField SANBOX_FIELD_DESC = new org.apache.thrift.protocol.TField("sanbox", org.apache.thrift.protocol.TType.BOOL, (short) 7);

    private static final org.apache.thrift.protocol.TField MORE_DATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("moreDatas", org.apache.thrift.protocol.TType.LIST, (short) 8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    // required
    protected String tradeId;

    // optional
    protected int configureId;

    // optional
    protected String platform;

    // optional
    protected String platformData;

    // optional
    protected String tradeNo;

    // optional
    protected String tradeReceipt;

    // optional
    protected boolean sanbox;

    // optional
    protected List<String> moreDatas;

    // isset id assignments
    private static final int __CONFIGUREID_ISSET_ID = 0;

    private static final int __SANBOX_ISSET_ID = 1;

    protected byte __isset_bitfield = 0;

    private static final _Fields optionals[] = { _Fields.CONFIGURE_ID, _Fields.PLATFORM, _Fields.PLATFORM_DATA, _Fields.TRADE_NO, _Fields.TRADE_RECEIPT, _Fields.SANBOX, _Fields.MORE_DATAS };

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        schemes.put(StandardScheme.class, new DOrderValidatorStandardSchemeFactory());
        schemes.put(TupleScheme.class, new DOrderValidatorTupleSchemeFactory());
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        TRADE_ID((short) 1, "tradeId"), CONFIGURE_ID((short) 2, "configureId"), PLATFORM((short) 3, "platform"), PLATFORM_DATA((short) 4, "platformData"), TRADE_NO((short) 5, "tradeNo"), TRADE_RECEIPT((short) 6, "tradeReceipt"), SANBOX((short) 7, "sanbox"), MORE_DATAS((short) 8, "moreDatas");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case // TRADE_ID
                1:
                    return TRADE_ID;
                case // CONFIGURE_ID
                2:
                    return CONFIGURE_ID;
                case // PLATFORM
                3:
                    return PLATFORM;
                case // PLATFORM_DATA
                4:
                    return PLATFORM_DATA;
                case // TRADE_NO
                5:
                    return TRADE_NO;
                case // TRADE_RECEIPT
                6:
                    return TRADE_RECEIPT;
                case // SANBOX
                7:
                    return SANBOX;
                case // MORE_DATAS
                8:
                    return MORE_DATAS;
                default:
                    return null;
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    public DOrderValidator() {
    }

    public DOrderValidator(String tradeId) {
        this();
        this.tradeId = tradeId;
    }

    /**
   * Performs a deep copy on <i>other</i>.
   */
    public DOrderValidator(DOrderValidator other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetTradeId()) {
            this.tradeId = other.tradeId;
        }
        this.configureId = other.configureId;
        if (other.isSetPlatform()) {
            this.platform = other.platform;
        }
        if (other.isSetPlatformData()) {
            this.platformData = other.platformData;
        }
        if (other.isSetTradeNo()) {
            this.tradeNo = other.tradeNo;
        }
        if (other.isSetTradeReceipt()) {
            this.tradeReceipt = other.tradeReceipt;
        }
        this.sanbox = other.sanbox;
        if (other.isSetMoreDatas()) {
            List<String> __this__moreDatas = new ArrayList<String>(other.moreDatas);
            this.moreDatas = __this__moreDatas;
        }
    }

    public DOrderValidator deepCopy() {
        return new DOrderValidator(this);
    }

    @Override
    public void clear() {
        this.tradeId = null;
        setConfigureIdIsSet(false);
        this.configureId = 0;
        this.platform = null;
        this.platformData = null;
        this.tradeNo = null;
        this.tradeReceipt = null;
        setSanboxIsSet(false);
        this.sanbox = false;
        this.moreDatas = null;
    }

    public String getTradeId() {
        return this.tradeId;
    }

    public DOrderValidator setTradeId(String tradeId) {
        this.tradeId = tradeId;
        return this;
    }

    public void unsetTradeId() {
        this.tradeId = null;
    }

    /** Returns true if field tradeId is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetTradeId() {
        return this.tradeId != null;
    }

    public void setTradeIdIsSet(boolean value) {
        if (!value) {
            this.tradeId = null;
        }
    }

    public int getConfigureId() {
        return this.configureId;
    }

    public DOrderValidator setConfigureId(int configureId) {
        this.configureId = configureId;
        setConfigureIdIsSet(true);
        return this;
    }

    public void unsetConfigureId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGUREID_ISSET_ID);
    }

    /** Returns true if field configureId is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetConfigureId() {
        return EncodingUtils.testBit(__isset_bitfield, __CONFIGUREID_ISSET_ID);
    }

    public void setConfigureIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGUREID_ISSET_ID, value);
    }

    public String getPlatform() {
        return this.platform;
    }

    public DOrderValidator setPlatform(String platform) {
        this.platform = platform;
        return this;
    }

    public void unsetPlatform() {
        this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetPlatform() {
        return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
        if (!value) {
            this.platform = null;
        }
    }

    public String getPlatformData() {
        return this.platformData;
    }

    public DOrderValidator setPlatformData(String platformData) {
        this.platformData = platformData;
        return this;
    }

    public void unsetPlatformData() {
        this.platformData = null;
    }

    /** Returns true if field platformData is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetPlatformData() {
        return this.platformData != null;
    }

    public void setPlatformDataIsSet(boolean value) {
        if (!value) {
            this.platformData = null;
        }
    }

    public String getTradeNo() {
        return this.tradeNo;
    }

    public DOrderValidator setTradeNo(String tradeNo) {
        this.tradeNo = tradeNo;
        return this;
    }

    public void unsetTradeNo() {
        this.tradeNo = null;
    }

    /** Returns true if field tradeNo is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetTradeNo() {
        return this.tradeNo != null;
    }

    public void setTradeNoIsSet(boolean value) {
        if (!value) {
            this.tradeNo = null;
        }
    }

    public String getTradeReceipt() {
        return this.tradeReceipt;
    }

    public DOrderValidator setTradeReceipt(String tradeReceipt) {
        this.tradeReceipt = tradeReceipt;
        return this;
    }

    public void unsetTradeReceipt() {
        this.tradeReceipt = null;
    }

    /** Returns true if field tradeReceipt is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetTradeReceipt() {
        return this.tradeReceipt != null;
    }

    public void setTradeReceiptIsSet(boolean value) {
        if (!value) {
            this.tradeReceipt = null;
        }
    }

    public boolean isSanbox() {
        return this.sanbox;
    }

    public DOrderValidator setSanbox(boolean sanbox) {
        this.sanbox = sanbox;
        setSanboxIsSet(true);
        return this;
    }

    public void unsetSanbox() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SANBOX_ISSET_ID);
    }

    /** Returns true if field sanbox is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetSanbox() {
        return EncodingUtils.testBit(__isset_bitfield, __SANBOX_ISSET_ID);
    }

    public void setSanboxIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SANBOX_ISSET_ID, value);
    }

    public int getMoreDatasSize() {
        return (this.moreDatas == null) ? 0 : this.moreDatas.size();
    }

    public java.util.Iterator<String> getMoreDatasIterator() {
        return (this.moreDatas == null) ? null : this.moreDatas.iterator();
    }

    public void addToMoreDatas(String elem) {
        if (this.moreDatas == null) {
            this.moreDatas = new ArrayList<String>();
        }
        this.moreDatas.add(elem);
    }

    public List<String> getMoreDatas() {
        return this.moreDatas;
    }

    public DOrderValidator setMoreDatas(List<String> moreDatas) {
        this.moreDatas = moreDatas;
        return this;
    }

    public void unsetMoreDatas() {
        this.moreDatas = null;
    }

    /** Returns true if field moreDatas is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetMoreDatas() {
        return this.moreDatas != null;
    }

    public void setMoreDatasIsSet(boolean value) {
        if (!value) {
            this.moreDatas = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case TRADE_ID:
                if (value == null) {
                    unsetTradeId();
                } else {
                    setTradeId((String) value);
                }
                break;
            case CONFIGURE_ID:
                if (value == null) {
                    unsetConfigureId();
                } else {
                    setConfigureId((Integer) value);
                }
                break;
            case PLATFORM:
                if (value == null) {
                    unsetPlatform();
                } else {
                    setPlatform((String) value);
                }
                break;
            case PLATFORM_DATA:
                if (value == null) {
                    unsetPlatformData();
                } else {
                    setPlatformData((String) value);
                }
                break;
            case TRADE_NO:
                if (value == null) {
                    unsetTradeNo();
                } else {
                    setTradeNo((String) value);
                }
                break;
            case TRADE_RECEIPT:
                if (value == null) {
                    unsetTradeReceipt();
                } else {
                    setTradeReceipt((String) value);
                }
                break;
            case SANBOX:
                if (value == null) {
                    unsetSanbox();
                } else {
                    setSanbox((Boolean) value);
                }
                break;
            case MORE_DATAS:
                if (value == null) {
                    unsetMoreDatas();
                } else {
                    setMoreDatas((List<String>) value);
                }
                break;
        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case TRADE_ID:
                return getTradeId();
            case CONFIGURE_ID:
                return getConfigureId();
            case PLATFORM:
                return getPlatform();
            case PLATFORM_DATA:
                return getPlatformData();
            case TRADE_NO:
                return getTradeNo();
            case TRADE_RECEIPT:
                return getTradeReceipt();
            case SANBOX:
                return isSanbox();
            case MORE_DATAS:
                return getMoreDatas();
        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }
        switch(field) {
            case TRADE_ID:
                return isSetTradeId();
            case CONFIGURE_ID:
                return isSetConfigureId();
            case PLATFORM:
                return isSetPlatform();
            case PLATFORM_DATA:
                return isSetPlatformData();
            case TRADE_NO:
                return isSetTradeNo();
            case TRADE_RECEIPT:
                return isSetTradeReceipt();
            case SANBOX:
                return isSetSanbox();
            case MORE_DATAS:
                return isSetMoreDatas();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof DOrderValidator)
            return this.equals((DOrderValidator) that);
        return false;
    }

    public boolean equals(DOrderValidator that) {
        if (that == null)
            return false;
        boolean this_present_tradeId = true && this.isSetTradeId();
        boolean that_present_tradeId = true && that.isSetTradeId();
        if (this_present_tradeId || that_present_tradeId) {
            if (!(this_present_tradeId && that_present_tradeId))
                return false;
            if (!this.tradeId.equals(that.tradeId))
                return false;
        }
        boolean this_present_configureId = true && this.isSetConfigureId();
        boolean that_present_configureId = true && that.isSetConfigureId();
        if (this_present_configureId || that_present_configureId) {
            if (!(this_present_configureId && that_present_configureId))
                return false;
            if (this.configureId != that.configureId)
                return false;
        }
        boolean this_present_platform = true && this.isSetPlatform();
        boolean that_present_platform = true && that.isSetPlatform();
        if (this_present_platform || that_present_platform) {
            if (!(this_present_platform && that_present_platform))
                return false;
            if (!this.platform.equals(that.platform))
                return false;
        }
        boolean this_present_platformData = true && this.isSetPlatformData();
        boolean that_present_platformData = true && that.isSetPlatformData();
        if (this_present_platformData || that_present_platformData) {
            if (!(this_present_platformData && that_present_platformData))
                return false;
            if (!this.platformData.equals(that.platformData))
                return false;
        }
        boolean this_present_tradeNo = true && this.isSetTradeNo();
        boolean that_present_tradeNo = true && that.isSetTradeNo();
        if (this_present_tradeNo || that_present_tradeNo) {
            if (!(this_present_tradeNo && that_present_tradeNo))
                return false;
            if (!this.tradeNo.equals(that.tradeNo))
                return false;
        }
        boolean this_present_tradeReceipt = true && this.isSetTradeReceipt();
        boolean that_present_tradeReceipt = true && that.isSetTradeReceipt();
        if (this_present_tradeReceipt || that_present_tradeReceipt) {
            if (!(this_present_tradeReceipt && that_present_tradeReceipt))
                return false;
            if (!this.tradeReceipt.equals(that.tradeReceipt))
                return false;
        }
        boolean this_present_sanbox = true && this.isSetSanbox();
        boolean that_present_sanbox = true && that.isSetSanbox();
        if (this_present_sanbox || that_present_sanbox) {
            if (!(this_present_sanbox && that_present_sanbox))
                return false;
            if (this.sanbox != that.sanbox)
                return false;
        }
        boolean this_present_moreDatas = true && this.isSetMoreDatas();
        boolean that_present_moreDatas = true && that.isSetMoreDatas();
        if (this_present_moreDatas || that_present_moreDatas) {
            if (!(this_present_moreDatas && that_present_moreDatas))
                return false;
            if (!this.moreDatas.equals(that.moreDatas))
                return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();
        boolean present_tradeId = true && (isSetTradeId());
        list.add(present_tradeId);
        if (present_tradeId)
            list.add(tradeId);
        boolean present_configureId = true && (isSetConfigureId());
        list.add(present_configureId);
        if (present_configureId)
            list.add(configureId);
        boolean present_platform = true && (isSetPlatform());
        list.add(present_platform);
        if (present_platform)
            list.add(platform);
        boolean present_platformData = true && (isSetPlatformData());
        list.add(present_platformData);
        if (present_platformData)
            list.add(platformData);
        boolean present_tradeNo = true && (isSetTradeNo());
        list.add(present_tradeNo);
        if (present_tradeNo)
            list.add(tradeNo);
        boolean present_tradeReceipt = true && (isSetTradeReceipt());
        list.add(present_tradeReceipt);
        if (present_tradeReceipt)
            list.add(tradeReceipt);
        boolean present_sanbox = true && (isSetSanbox());
        list.add(present_sanbox);
        if (present_sanbox)
            list.add(sanbox);
        boolean present_moreDatas = true && (isSetMoreDatas());
        list.add(present_moreDatas);
        if (present_moreDatas)
            list.add(moreDatas);
        return list.hashCode();
    }

    @Override
    public int compareTo(DOrderValidator other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }
        int lastComparison = 0;
        lastComparison = Boolean.valueOf(isSetTradeId()).compareTo(other.isSetTradeId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTradeId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeId, other.tradeId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetConfigureId()).compareTo(other.isSetConfigureId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetConfigureId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configureId, other.configureId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlatform()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlatformData()).compareTo(other.isSetPlatformData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlatformData()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformData, other.platformData);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTradeNo()).compareTo(other.isSetTradeNo());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTradeNo()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeNo, other.tradeNo);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTradeReceipt()).compareTo(other.isSetTradeReceipt());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTradeReceipt()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeReceipt, other.tradeReceipt);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSanbox()).compareTo(other.isSetSanbox());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSanbox()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sanbox, other.sanbox);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoreDatas()).compareTo(other.isSetMoreDatas());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoreDatas()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moreDatas, other.moreDatas);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DOrderValidator(");
        boolean first = true;
        sb.append("tradeId:");
        if (this.tradeId == null) {
            sb.append("null");
        } else {
            sb.append(this.tradeId);
        }
        first = false;
        if (isSetConfigureId()) {
            if (!first)
                sb.append(", ");
            sb.append("configureId:");
            sb.append(this.configureId);
            first = false;
        }
        if (isSetPlatform()) {
            if (!first)
                sb.append(", ");
            sb.append("platform:");
            if (this.platform == null) {
                sb.append("null");
            } else {
                sb.append(this.platform);
            }
            first = false;
        }
        if (isSetPlatformData()) {
            if (!first)
                sb.append(", ");
            sb.append("platformData:");
            if (this.platformData == null) {
                sb.append("null");
            } else {
                sb.append(this.platformData);
            }
            first = false;
        }
        if (isSetTradeNo()) {
            if (!first)
                sb.append(", ");
            sb.append("tradeNo:");
            if (this.tradeNo == null) {
                sb.append("null");
            } else {
                sb.append(this.tradeNo);
            }
            first = false;
        }
        if (isSetTradeReceipt()) {
            if (!first)
                sb.append(", ");
            sb.append("tradeReceipt:");
            if (this.tradeReceipt == null) {
                sb.append("null");
            } else {
                sb.append(this.tradeReceipt);
            }
            first = false;
        }
        if (isSetSanbox()) {
            if (!first)
                sb.append(", ");
            sb.append("sanbox:");
            sb.append(this.sanbox);
            first = false;
        }
        if (isSetMoreDatas()) {
            if (!first)
                sb.append(", ");
            sb.append("moreDatas:");
            if (this.moreDatas == null) {
                sb.append("null");
            } else {
                sb.append(this.moreDatas);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class DOrderValidatorStandardSchemeFactory implements SchemeFactory {

        public DOrderValidatorStandardScheme getScheme() {
            return new DOrderValidatorStandardScheme();
        }
    }

    private static class DOrderValidatorStandardScheme extends StandardScheme<DOrderValidator> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, DOrderValidator struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch(schemeField.id) {
                    case // TRADE_ID
                    1:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.tradeId = iprot.readString();
                            struct.setTradeIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // CONFIGURE_ID
                    2:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.configureId = iprot.readI32();
                            struct.setConfigureIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // PLATFORM
                    3:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.platform = iprot.readString();
                            struct.setPlatformIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // PLATFORM_DATA
                    4:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.platformData = iprot.readString();
                            struct.setPlatformDataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // TRADE_NO
                    5:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.tradeNo = iprot.readString();
                            struct.setTradeNoIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // TRADE_RECEIPT
                    6:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.tradeReceipt = iprot.readString();
                            struct.setTradeReceiptIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // SANBOX
                    7:
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.sanbox = iprot.readBool();
                            struct.setSanboxIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // MORE_DATAS
                    8:
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                                struct.moreDatas = new ArrayList<String>(_list16.size);
                                String _elem17;
                                for (int _i18 = 0; _i18 < _list16.size; ++_i18) {
                                    _elem17 = iprot.readString();
                                    struct.moreDatas.add(_elem17);
                                }
                                iprot.readListEnd();
                            }
                            struct.setMoreDatasIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, DOrderValidator struct) throws org.apache.thrift.TException {
            struct.validate();
            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.tradeId != null) {
                oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
                oprot.writeString(struct.tradeId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetConfigureId()) {
                oprot.writeFieldBegin(CONFIGURE_ID_FIELD_DESC);
                oprot.writeI32(struct.configureId);
                oprot.writeFieldEnd();
            }
            if (struct.platform != null) {
                if (struct.isSetPlatform()) {
                    oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
                    oprot.writeString(struct.platform);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.platformData != null) {
                if (struct.isSetPlatformData()) {
                    oprot.writeFieldBegin(PLATFORM_DATA_FIELD_DESC);
                    oprot.writeString(struct.platformData);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.tradeNo != null) {
                if (struct.isSetTradeNo()) {
                    oprot.writeFieldBegin(TRADE_NO_FIELD_DESC);
                    oprot.writeString(struct.tradeNo);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.tradeReceipt != null) {
                if (struct.isSetTradeReceipt()) {
                    oprot.writeFieldBegin(TRADE_RECEIPT_FIELD_DESC);
                    oprot.writeString(struct.tradeReceipt);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetSanbox()) {
                oprot.writeFieldBegin(SANBOX_FIELD_DESC);
                oprot.writeBool(struct.sanbox);
                oprot.writeFieldEnd();
            }
            if (struct.moreDatas != null) {
                if (struct.isSetMoreDatas()) {
                    oprot.writeFieldBegin(MORE_DATAS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.moreDatas.size()));
                        for (String _iter19 : struct.moreDatas) {
                            oprot.writeString(_iter19);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class DOrderValidatorTupleSchemeFactory implements SchemeFactory {

        public DOrderValidatorTupleScheme getScheme() {
            return new DOrderValidatorTupleScheme();
        }
    }

    private static class DOrderValidatorTupleScheme extends TupleScheme<DOrderValidator> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, DOrderValidator struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetTradeId()) {
                optionals.set(0);
            }
            if (struct.isSetConfigureId()) {
                optionals.set(1);
            }
            if (struct.isSetPlatform()) {
                optionals.set(2);
            }
            if (struct.isSetPlatformData()) {
                optionals.set(3);
            }
            if (struct.isSetTradeNo()) {
                optionals.set(4);
            }
            if (struct.isSetTradeReceipt()) {
                optionals.set(5);
            }
            if (struct.isSetSanbox()) {
                optionals.set(6);
            }
            if (struct.isSetMoreDatas()) {
                optionals.set(7);
            }
            oprot.writeBitSet(optionals, 8);
            if (struct.isSetTradeId()) {
                oprot.writeString(struct.tradeId);
            }
            if (struct.isSetConfigureId()) {
                oprot.writeI32(struct.configureId);
            }
            if (struct.isSetPlatform()) {
                oprot.writeString(struct.platform);
            }
            if (struct.isSetPlatformData()) {
                oprot.writeString(struct.platformData);
            }
            if (struct.isSetTradeNo()) {
                oprot.writeString(struct.tradeNo);
            }
            if (struct.isSetTradeReceipt()) {
                oprot.writeString(struct.tradeReceipt);
            }
            if (struct.isSetSanbox()) {
                oprot.writeBool(struct.sanbox);
            }
            if (struct.isSetMoreDatas()) {
                {
                    oprot.writeI32(struct.moreDatas.size());
                    for (String _iter20 : struct.moreDatas) {
                        oprot.writeString(_iter20);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, DOrderValidator struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(8);
            if (incoming.get(0)) {
                struct.tradeId = iprot.readString();
                struct.setTradeIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.configureId = iprot.readI32();
                struct.setConfigureIdIsSet(true);
            }
            if (incoming.get(2)) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
            }
            if (incoming.get(3)) {
                struct.platformData = iprot.readString();
                struct.setPlatformDataIsSet(true);
            }
            if (incoming.get(4)) {
                struct.tradeNo = iprot.readString();
                struct.setTradeNoIsSet(true);
            }
            if (incoming.get(5)) {
                struct.tradeReceipt = iprot.readString();
                struct.setTradeReceiptIsSet(true);
            }
            if (incoming.get(6)) {
                struct.sanbox = iprot.readBool();
                struct.setSanboxIsSet(true);
            }
            if (incoming.get(7)) {
                {
                    org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.moreDatas = new ArrayList<String>(_list21.size);
                    String _elem22;
                    for (int _i23 = 0; _i23 < _list21.size; ++_i23) {
                        _elem22 = iprot.readString();
                        struct.moreDatas.add(_elem22);
                    }
                }
                struct.setMoreDatasIsSet(true);
            }
        }
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CONFIGURE_ID, new org.apache.thrift.meta_data.FieldMetaData("configureId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PLATFORM_DATA, new org.apache.thrift.meta_data.FieldMetaData("platformData", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TRADE_NO, new org.apache.thrift.meta_data.FieldMetaData("tradeNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TRADE_RECEIPT, new org.apache.thrift.meta_data.FieldMetaData("tradeReceipt", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SANBOX, new org.apache.thrift.meta_data.FieldMetaData("sanbox", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.MORE_DATAS, new org.apache.thrift.meta_data.FieldMetaData("moreDatas", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DOrderValidator.class, metaDataMap);
    }

    public DOrderValidator create() {
        return new DOrderValidator();
    }

    public DOrderValidator clone() {
        return cloneDepth(0);
    }

    public DOrderValidator cloneDepth(int _depth) {
        DOrderValidator _clone = create();
        _clone.setTradeId(tradeId);
        _clone.setConfigureId(configureId);
        _clone.setPlatform(platform);
        _clone.setPlatformData(platformData);
        _clone.setTradeNo(tradeNo);
        _clone.setTradeReceipt(tradeReceipt);
        _clone.setSanbox(sanbox);
        _clone.setMoreDatas(moreDatas);
        cloneMore(_clone, _depth);
        return _clone;
    }

    public void cloneMore(DOrderValidator _clone, int _depth) {
    }
}
