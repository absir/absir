/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tplatform;

import com.absir.aserv.system.bean.value.JaLang;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import javax.annotation.Generated;
import java.util.*;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.absir.data.value.IThrift;
import com.fasterxml.jackson.annotation.JsonIgnore;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class DFromSetting implements org.apache.thrift.TBase<DFromSetting, DFromSetting._Fields>, java.io.Serializable, Cloneable, Comparable<DFromSetting>, IThrift {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DFromSetting");

    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short) 3);

    private static final org.apache.thrift.protocol.TField OPEN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("openUrl", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final org.apache.thrift.protocol.TField MIN_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("minVersion", org.apache.thrift.protocol.TType.STRING, (short) 5);

    private static final org.apache.thrift.protocol.TField SERVER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("serverUrl", org.apache.thrift.protocol.TType.STRING, (short) 6);

    private static final org.apache.thrift.protocol.TField CDN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("cdnUrl", org.apache.thrift.protocol.TType.STRING, (short) 7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    // optional
    @JaLang("标题")
    protected String title;

    // optional
    @JaLang("内容")
    protected String content;

    // optional
    @JaLang("类型")
    protected int type;

    // optional
    @JaLang("开启链接")
    protected String openUrl;

    // optional
    @JaLang("最小版本")
    protected String minVersion;

    // optional
    @JaLang(value = "更新地址", tag = "upgradeUrl")
    protected String serverUrl;

    // optional
    @JaLang("CDN地址")
    protected String cdnUrl;

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;

    protected byte __isset_bitfield = 0;

    private static final _Fields optionals[] = { _Fields.TITLE, _Fields.CONTENT, _Fields.TYPE, _Fields.OPEN_URL, _Fields.MIN_VERSION, _Fields.SERVER_URL, _Fields.CDN_URL };

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        schemes.put(StandardScheme.class, new DFromSettingStandardSchemeFactory());
        schemes.put(TupleScheme.class, new DFromSettingTupleSchemeFactory());
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        TITLE((short) 1, "title"), CONTENT((short) 2, "content"), TYPE((short) 3, "type"), OPEN_URL((short) 4, "openUrl"), MIN_VERSION((short) 5, "minVersion"), SERVER_URL((short) 6, "serverUrl"), CDN_URL((short) 7, "cdnUrl");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case // TITLE
                1:
                    return TITLE;
                case // CONTENT
                2:
                    return CONTENT;
                case // TYPE
                3:
                    return TYPE;
                case // OPEN_URL
                4:
                    return OPEN_URL;
                case // MIN_VERSION
                5:
                    return MIN_VERSION;
                case // SERVER_URL
                6:
                    return SERVER_URL;
                case // CDN_URL
                7:
                    return CDN_URL;
                default:
                    return null;
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    public DFromSetting() {
        this.title = "";
        this.content = "";
        this.openUrl = "";
        this.minVersion = "";
        this.serverUrl = "";
        this.cdnUrl = "";
    }

    /**
   * Performs a deep copy on <i>other</i>.
   */
    public DFromSetting(DFromSetting other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetTitle()) {
            this.title = other.title;
        }
        if (other.isSetContent()) {
            this.content = other.content;
        }
        this.type = other.type;
        if (other.isSetOpenUrl()) {
            this.openUrl = other.openUrl;
        }
        if (other.isSetMinVersion()) {
            this.minVersion = other.minVersion;
        }
        if (other.isSetServerUrl()) {
            this.serverUrl = other.serverUrl;
        }
        if (other.isSetCdnUrl()) {
            this.cdnUrl = other.cdnUrl;
        }
    }

    public DFromSetting deepCopy() {
        return new DFromSetting(this);
    }

    @Override
    public void clear() {
        this.title = "";
        this.content = "";
        setTypeIsSet(false);
        this.type = 0;
        this.openUrl = "";
        this.minVersion = "";
        this.serverUrl = "";
        this.cdnUrl = "";
    }

    public String getTitle() {
        return this.title;
    }

    public DFromSetting setTitle(String title) {
        this.title = title;
        return this;
    }

    public void unsetTitle() {
        this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetTitle() {
        return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
        if (!value) {
            this.title = null;
        }
    }

    public String getContent() {
        return this.content;
    }

    public DFromSetting setContent(String content) {
        this.content = content;
        return this;
    }

    public void unsetContent() {
        this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetContent() {
        return this.content != null;
    }

    public void setContentIsSet(boolean value) {
        if (!value) {
            this.content = null;
        }
    }

    public int getType() {
        return this.type;
    }

    public DFromSetting setType(int type) {
        this.type = type;
        setTypeIsSet(true);
        return this;
    }

    public void unsetType() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetType() {
        return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getOpenUrl() {
        return this.openUrl;
    }

    public DFromSetting setOpenUrl(String openUrl) {
        this.openUrl = openUrl;
        return this;
    }

    public void unsetOpenUrl() {
        this.openUrl = null;
    }

    /** Returns true if field openUrl is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetOpenUrl() {
        return this.openUrl != null;
    }

    public void setOpenUrlIsSet(boolean value) {
        if (!value) {
            this.openUrl = null;
        }
    }

    public String getMinVersion() {
        return this.minVersion;
    }

    public DFromSetting setMinVersion(String minVersion) {
        this.minVersion = minVersion;
        return this;
    }

    public void unsetMinVersion() {
        this.minVersion = null;
    }

    /** Returns true if field minVersion is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetMinVersion() {
        return this.minVersion != null;
    }

    public void setMinVersionIsSet(boolean value) {
        if (!value) {
            this.minVersion = null;
        }
    }

    public String getServerUrl() {
        return this.serverUrl;
    }

    public DFromSetting setServerUrl(String serverUrl) {
        this.serverUrl = serverUrl;
        return this;
    }

    public void unsetServerUrl() {
        this.serverUrl = null;
    }

    /** Returns true if field serverUrl is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetServerUrl() {
        return this.serverUrl != null;
    }

    public void setServerUrlIsSet(boolean value) {
        if (!value) {
            this.serverUrl = null;
        }
    }

    public String getCdnUrl() {
        return this.cdnUrl;
    }

    public DFromSetting setCdnUrl(String cdnUrl) {
        this.cdnUrl = cdnUrl;
        return this;
    }

    public void unsetCdnUrl() {
        this.cdnUrl = null;
    }

    /** Returns true if field cdnUrl is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetCdnUrl() {
        return this.cdnUrl != null;
    }

    public void setCdnUrlIsSet(boolean value) {
        if (!value) {
            this.cdnUrl = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case TITLE:
                if (value == null) {
                    unsetTitle();
                } else {
                    setTitle((String) value);
                }
                break;
            case CONTENT:
                if (value == null) {
                    unsetContent();
                } else {
                    setContent((String) value);
                }
                break;
            case TYPE:
                if (value == null) {
                    unsetType();
                } else {
                    setType((Integer) value);
                }
                break;
            case OPEN_URL:
                if (value == null) {
                    unsetOpenUrl();
                } else {
                    setOpenUrl((String) value);
                }
                break;
            case MIN_VERSION:
                if (value == null) {
                    unsetMinVersion();
                } else {
                    setMinVersion((String) value);
                }
                break;
            case SERVER_URL:
                if (value == null) {
                    unsetServerUrl();
                } else {
                    setServerUrl((String) value);
                }
                break;
            case CDN_URL:
                if (value == null) {
                    unsetCdnUrl();
                } else {
                    setCdnUrl((String) value);
                }
                break;
        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case TITLE:
                return getTitle();
            case CONTENT:
                return getContent();
            case TYPE:
                return getType();
            case OPEN_URL:
                return getOpenUrl();
            case MIN_VERSION:
                return getMinVersion();
            case SERVER_URL:
                return getServerUrl();
            case CDN_URL:
                return getCdnUrl();
        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }
        switch(field) {
            case TITLE:
                return isSetTitle();
            case CONTENT:
                return isSetContent();
            case TYPE:
                return isSetType();
            case OPEN_URL:
                return isSetOpenUrl();
            case MIN_VERSION:
                return isSetMinVersion();
            case SERVER_URL:
                return isSetServerUrl();
            case CDN_URL:
                return isSetCdnUrl();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof DFromSetting)
            return this.equals((DFromSetting) that);
        return false;
    }

    public boolean equals(DFromSetting that) {
        if (that == null)
            return false;
        boolean this_present_title = true && this.isSetTitle();
        boolean that_present_title = true && that.isSetTitle();
        if (this_present_title || that_present_title) {
            if (!(this_present_title && that_present_title))
                return false;
            if (!this.title.equals(that.title))
                return false;
        }
        boolean this_present_content = true && this.isSetContent();
        boolean that_present_content = true && that.isSetContent();
        if (this_present_content || that_present_content) {
            if (!(this_present_content && that_present_content))
                return false;
            if (!this.content.equals(that.content))
                return false;
        }
        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type) {
            if (!(this_present_type && that_present_type))
                return false;
            if (this.type != that.type)
                return false;
        }
        boolean this_present_openUrl = true && this.isSetOpenUrl();
        boolean that_present_openUrl = true && that.isSetOpenUrl();
        if (this_present_openUrl || that_present_openUrl) {
            if (!(this_present_openUrl && that_present_openUrl))
                return false;
            if (!this.openUrl.equals(that.openUrl))
                return false;
        }
        boolean this_present_minVersion = true && this.isSetMinVersion();
        boolean that_present_minVersion = true && that.isSetMinVersion();
        if (this_present_minVersion || that_present_minVersion) {
            if (!(this_present_minVersion && that_present_minVersion))
                return false;
            if (!this.minVersion.equals(that.minVersion))
                return false;
        }
        boolean this_present_serverUrl = true && this.isSetServerUrl();
        boolean that_present_serverUrl = true && that.isSetServerUrl();
        if (this_present_serverUrl || that_present_serverUrl) {
            if (!(this_present_serverUrl && that_present_serverUrl))
                return false;
            if (!this.serverUrl.equals(that.serverUrl))
                return false;
        }
        boolean this_present_cdnUrl = true && this.isSetCdnUrl();
        boolean that_present_cdnUrl = true && that.isSetCdnUrl();
        if (this_present_cdnUrl || that_present_cdnUrl) {
            if (!(this_present_cdnUrl && that_present_cdnUrl))
                return false;
            if (!this.cdnUrl.equals(that.cdnUrl))
                return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();
        boolean present_title = true && (isSetTitle());
        list.add(present_title);
        if (present_title)
            list.add(title);
        boolean present_content = true && (isSetContent());
        list.add(present_content);
        if (present_content)
            list.add(content);
        boolean present_type = true && (isSetType());
        list.add(present_type);
        if (present_type)
            list.add(type);
        boolean present_openUrl = true && (isSetOpenUrl());
        list.add(present_openUrl);
        if (present_openUrl)
            list.add(openUrl);
        boolean present_minVersion = true && (isSetMinVersion());
        list.add(present_minVersion);
        if (present_minVersion)
            list.add(minVersion);
        boolean present_serverUrl = true && (isSetServerUrl());
        list.add(present_serverUrl);
        if (present_serverUrl)
            list.add(serverUrl);
        boolean present_cdnUrl = true && (isSetCdnUrl());
        list.add(present_cdnUrl);
        if (present_cdnUrl)
            list.add(cdnUrl);
        return list.hashCode();
    }

    @Override
    public int compareTo(DFromSetting other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }
        int lastComparison = 0;
        lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTitle()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetContent()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOpenUrl()).compareTo(other.isSetOpenUrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOpenUrl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openUrl, other.openUrl);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMinVersion()).compareTo(other.isSetMinVersion());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMinVersion()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minVersion, other.minVersion);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetServerUrl()).compareTo(other.isSetServerUrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetServerUrl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverUrl, other.serverUrl);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCdnUrl()).compareTo(other.isSetCdnUrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCdnUrl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdnUrl, other.cdnUrl);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DFromSetting(");
        boolean first = true;
        if (isSetTitle()) {
            sb.append("title:");
            if (this.title == null) {
                sb.append("null");
            } else {
                sb.append(this.title);
            }
            first = false;
        }
        if (isSetContent()) {
            if (!first)
                sb.append(", ");
            sb.append("content:");
            if (this.content == null) {
                sb.append("null");
            } else {
                sb.append(this.content);
            }
            first = false;
        }
        if (isSetType()) {
            if (!first)
                sb.append(", ");
            sb.append("type:");
            sb.append(this.type);
            first = false;
        }
        if (isSetOpenUrl()) {
            if (!first)
                sb.append(", ");
            sb.append("openUrl:");
            if (this.openUrl == null) {
                sb.append("null");
            } else {
                sb.append(this.openUrl);
            }
            first = false;
        }
        if (isSetMinVersion()) {
            if (!first)
                sb.append(", ");
            sb.append("minVersion:");
            if (this.minVersion == null) {
                sb.append("null");
            } else {
                sb.append(this.minVersion);
            }
            first = false;
        }
        if (isSetServerUrl()) {
            if (!first)
                sb.append(", ");
            sb.append("serverUrl:");
            if (this.serverUrl == null) {
                sb.append("null");
            } else {
                sb.append(this.serverUrl);
            }
            first = false;
        }
        if (isSetCdnUrl()) {
            if (!first)
                sb.append(", ");
            sb.append("cdnUrl:");
            if (this.cdnUrl == null) {
                sb.append("null");
            } else {
                sb.append(this.cdnUrl);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class DFromSettingStandardSchemeFactory implements SchemeFactory {

        public DFromSettingStandardScheme getScheme() {
            return new DFromSettingStandardScheme();
        }
    }

    private static class DFromSettingStandardScheme extends StandardScheme<DFromSetting> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, DFromSetting struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch(schemeField.id) {
                    case // TITLE
                    1:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.title = iprot.readString();
                            struct.setTitleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // CONTENT
                    2:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.content = iprot.readString();
                            struct.setContentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // TYPE
                    3:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.type = iprot.readI32();
                            struct.setTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // OPEN_URL
                    4:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.openUrl = iprot.readString();
                            struct.setOpenUrlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // MIN_VERSION
                    5:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.minVersion = iprot.readString();
                            struct.setMinVersionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // SERVER_URL
                    6:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.serverUrl = iprot.readString();
                            struct.setServerUrlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // CDN_URL
                    7:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.cdnUrl = iprot.readString();
                            struct.setCdnUrlIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, DFromSetting struct) throws org.apache.thrift.TException {
            struct.validate();
            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.title != null) {
                if (struct.isSetTitle()) {
                    oprot.writeFieldBegin(TITLE_FIELD_DESC);
                    oprot.writeString(struct.title);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.content != null) {
                if (struct.isSetContent()) {
                    oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                    oprot.writeString(struct.content);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetType()) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeI32(struct.type);
                oprot.writeFieldEnd();
            }
            if (struct.openUrl != null) {
                if (struct.isSetOpenUrl()) {
                    oprot.writeFieldBegin(OPEN_URL_FIELD_DESC);
                    oprot.writeString(struct.openUrl);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.minVersion != null) {
                if (struct.isSetMinVersion()) {
                    oprot.writeFieldBegin(MIN_VERSION_FIELD_DESC);
                    oprot.writeString(struct.minVersion);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.serverUrl != null) {
                if (struct.isSetServerUrl()) {
                    oprot.writeFieldBegin(SERVER_URL_FIELD_DESC);
                    oprot.writeString(struct.serverUrl);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.cdnUrl != null) {
                if (struct.isSetCdnUrl()) {
                    oprot.writeFieldBegin(CDN_URL_FIELD_DESC);
                    oprot.writeString(struct.cdnUrl);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class DFromSettingTupleSchemeFactory implements SchemeFactory {

        public DFromSettingTupleScheme getScheme() {
            return new DFromSettingTupleScheme();
        }
    }

    private static class DFromSettingTupleScheme extends TupleScheme<DFromSetting> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, DFromSetting struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetTitle()) {
                optionals.set(0);
            }
            if (struct.isSetContent()) {
                optionals.set(1);
            }
            if (struct.isSetType()) {
                optionals.set(2);
            }
            if (struct.isSetOpenUrl()) {
                optionals.set(3);
            }
            if (struct.isSetMinVersion()) {
                optionals.set(4);
            }
            if (struct.isSetServerUrl()) {
                optionals.set(5);
            }
            if (struct.isSetCdnUrl()) {
                optionals.set(6);
            }
            oprot.writeBitSet(optionals, 7);
            if (struct.isSetTitle()) {
                oprot.writeString(struct.title);
            }
            if (struct.isSetContent()) {
                oprot.writeString(struct.content);
            }
            if (struct.isSetType()) {
                oprot.writeI32(struct.type);
            }
            if (struct.isSetOpenUrl()) {
                oprot.writeString(struct.openUrl);
            }
            if (struct.isSetMinVersion()) {
                oprot.writeString(struct.minVersion);
            }
            if (struct.isSetServerUrl()) {
                oprot.writeString(struct.serverUrl);
            }
            if (struct.isSetCdnUrl()) {
                oprot.writeString(struct.cdnUrl);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, DFromSetting struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(7);
            if (incoming.get(0)) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
            }
            if (incoming.get(1)) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
            }
            if (incoming.get(2)) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
            }
            if (incoming.get(3)) {
                struct.openUrl = iprot.readString();
                struct.setOpenUrlIsSet(true);
            }
            if (incoming.get(4)) {
                struct.minVersion = iprot.readString();
                struct.setMinVersionIsSet(true);
            }
            if (incoming.get(5)) {
                struct.serverUrl = iprot.readString();
                struct.setServerUrlIsSet(true);
            }
            if (incoming.get(6)) {
                struct.cdnUrl = iprot.readString();
                struct.setCdnUrlIsSet(true);
            }
        }
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.OPEN_URL, new org.apache.thrift.meta_data.FieldMetaData("openUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.MIN_VERSION, new org.apache.thrift.meta_data.FieldMetaData("minVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SERVER_URL, new org.apache.thrift.meta_data.FieldMetaData("serverUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CDN_URL, new org.apache.thrift.meta_data.FieldMetaData("cdnUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DFromSetting.class, metaDataMap);
    }

    public DFromSetting create() {
        return new DFromSetting();
    }

    public DFromSetting clone() {
        return cloneDepth(0);
    }

    public DFromSetting cloneDepth(int _depth) {
        DFromSetting _clone = create();
        _clone.setTitle(title);
        _clone.setContent(content);
        _clone.setType(type);
        _clone.setOpenUrl(openUrl);
        _clone.setMinVersion(minVersion);
        _clone.setServerUrl(serverUrl);
        _clone.setCdnUrl(cdnUrl);
        cloneMore(_clone, _depth);
        return _clone;
    }

    public void cloneMore(DFromSetting _clone, int _depth) {
    }
}
