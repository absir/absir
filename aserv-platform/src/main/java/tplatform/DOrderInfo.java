/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tplatform;

import com.fasterxml.jackson.annotation.JsonIgnore;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-11")
public class DOrderInfo implements org.apache.thrift.TBase<DOrderInfo, DOrderInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DOrderInfo> {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DOrderInfo");

    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I64, (short) 9);

    private static final org.apache.thrift.protocol.TField PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerId", org.apache.thrift.protocol.TType.I64, (short) 10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    // optional
    protected String platform;

    // optional
    protected long serverId;

    // required
    protected long playerId;

    private static final int __SERVERID_ISSET_ID = 4;

    private static final int __PLAYERID_ISSET_ID = 5;

    protected byte __isset_bitfield = 0;

    private static final _Fields optionals[] = { _Fields.PREPARE, _Fields.CONFIGURE_ID, _Fields.PLATFORM, _Fields.PLATFORM_DATA, _Fields.GOODS_ID, _Fields.GOODS_NUMBER, _Fields.AMOUNT, _Fields.USER_ID, _Fields.SERVER_ID, _Fields.PLAYER_ID, _Fields.SHORT_TRADE_ID, _Fields.MORE_DATAS };

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    private static final org.apache.thrift.protocol.TField PREPARE_FIELD_DESC = new org.apache.thrift.protocol.TField("prepare", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final org.apache.thrift.protocol.TField CONFIGURE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configureId", org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final org.apache.thrift.protocol.TField PLATFORM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("platformData", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final org.apache.thrift.protocol.TField GOODS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsId", org.apache.thrift.protocol.TType.STRING, (short) 5);

    private static final org.apache.thrift.protocol.TField GOODS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsNumber", org.apache.thrift.protocol.TType.I32, (short) 6);

    private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short) 7);

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short) 8);

    private static final org.apache.thrift.protocol.TField SHORT_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shortTradeId", org.apache.thrift.protocol.TType.BOOL, (short) 11);

    private static final org.apache.thrift.protocol.TField MORE_DATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("moreDatas", org.apache.thrift.protocol.TType.LIST, (short) 12);

    // isset id assignments
    private static final int __CONFIGUREID_ISSET_ID = 0;

    private static final int __GOODSNUMBER_ISSET_ID = 1;

    private static final int __AMOUNT_ISSET_ID = 2;

    private static final int __USERID_ISSET_ID = 3;

    private static final int __SHORTTRADEID_ISSET_ID = 6;

    // optional
    protected String prepare;

    // optional
    protected int configureId;

    // optional
    protected String platformData;

    // optional
    protected String goodsId;

    // optional
    protected int goodsNumber;

    // optional
    protected double amount;

    // optional
    protected long userId;

    // optional
    protected boolean shortTradeId;

    // optional
    protected List<String> moreDatas;

    static {
        schemes.put(StandardScheme.class, new DOrderInfoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new DOrderInfoTupleSchemeFactory());
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        PREPARE((short) 1, "prepare"), CONFIGURE_ID((short) 2, "configureId"), PLATFORM((short) 3, "platform"), PLATFORM_DATA((short) 4, "platformData"), GOODS_ID((short) 5, "goodsId"), GOODS_NUMBER((short) 6, "goodsNumber"), AMOUNT((short) 7, "amount"), USER_ID((short) 8, "userId"), SERVER_ID((short) 9, "serverId"), PLAYER_ID((short) 10, "playerId"), SHORT_TRADE_ID((short) 11, "shortTradeId"), MORE_DATAS((short) 12, "moreDatas");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case // PREPARE
                1:
                    return PREPARE;
                case // CONFIGURE_ID
                2:
                    return CONFIGURE_ID;
                case // PLATFORM
                3:
                    return PLATFORM;
                case // PLATFORM_DATA
                4:
                    return PLATFORM_DATA;
                case // GOODS_ID
                5:
                    return GOODS_ID;
                case // GOODS_NUMBER
                6:
                    return GOODS_NUMBER;
                case // AMOUNT
                7:
                    return AMOUNT;
                case // USER_ID
                8:
                    return USER_ID;
                case // SERVER_ID
                9:
                    return SERVER_ID;
                case // PLAYER_ID
                10:
                    return PLAYER_ID;
                case // SHORT_TRADE_ID
                11:
                    return SHORT_TRADE_ID;
                case // MORE_DATAS
                12:
                    return MORE_DATAS;
                default:
                    return null;
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    public DOrderInfo() {
    }

    /**
   * Performs a deep copy on <i>other</i>.
   */
    public DOrderInfo(DOrderInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetPrepare()) {
            this.prepare = other.prepare;
        }
        this.configureId = other.configureId;
        if (other.isSetPlatform()) {
            this.platform = other.platform;
        }
        if (other.isSetPlatformData()) {
            this.platformData = other.platformData;
        }
        if (other.isSetGoodsId()) {
            this.goodsId = other.goodsId;
        }
        this.goodsNumber = other.goodsNumber;
        this.amount = other.amount;
        this.userId = other.userId;
        this.serverId = other.serverId;
        this.playerId = other.playerId;
        this.shortTradeId = other.shortTradeId;
        if (other.isSetMoreDatas()) {
            List<String> __this__moreDatas = new ArrayList<String>(other.moreDatas);
            this.moreDatas = __this__moreDatas;
        }
    }

    public DOrderInfo deepCopy() {
        return new DOrderInfo(this);
    }

    @Override
    public void clear() {
        this.prepare = null;
        setConfigureIdIsSet(false);
        this.configureId = 0;
        this.platform = null;
        this.platformData = null;
        this.goodsId = null;
        setGoodsNumberIsSet(false);
        this.goodsNumber = 0;
        setAmountIsSet(false);
        this.amount = 0.0;
        setUserIdIsSet(false);
        this.userId = 0;
        setServerIdIsSet(false);
        this.serverId = 0;
        setPlayerIdIsSet(false);
        this.playerId = 0;
        setShortTradeIdIsSet(false);
        this.shortTradeId = false;
        this.moreDatas = null;
    }

    public String getPlatform() {
        return this.platform;
    }

    public DOrderInfo setPlatform(String platform) {
        this.platform = platform;
        return this;
    }

    public void unsetPlatform() {
        this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetPlatform() {
        return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
        if (!value) {
            this.platform = null;
        }
    }

    public long getServerId() {
        return this.serverId;
    }

    public DOrderInfo setServerId(long serverId) {
        this.serverId = serverId;
        setServerIdIsSet(true);
        return this;
    }

    public void unsetServerId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetServerId() {
        return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public long getPlayerId() {
        return this.playerId;
    }

    public DOrderInfo setPlayerId(long playerId) {
        this.playerId = playerId;
        setPlayerIdIsSet(true);
        return this;
    }

    public void unsetPlayerId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERID_ISSET_ID);
    }

    /** Returns true if field playerId is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetPlayerId() {
        return EncodingUtils.testBit(__isset_bitfield, __PLAYERID_ISSET_ID);
    }

    public void setPlayerIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case PREPARE:
                if (value == null) {
                    unsetPrepare();
                } else {
                    setPrepare((String) value);
                }
                break;
            case CONFIGURE_ID:
                if (value == null) {
                    unsetConfigureId();
                } else {
                    setConfigureId((Integer) value);
                }
                break;
            case PLATFORM:
                if (value == null) {
                    unsetPlatform();
                } else {
                    setPlatform((String) value);
                }
                break;
            case PLATFORM_DATA:
                if (value == null) {
                    unsetPlatformData();
                } else {
                    setPlatformData((String) value);
                }
                break;
            case GOODS_ID:
                if (value == null) {
                    unsetGoodsId();
                } else {
                    setGoodsId((String) value);
                }
                break;
            case GOODS_NUMBER:
                if (value == null) {
                    unsetGoodsNumber();
                } else {
                    setGoodsNumber((Integer) value);
                }
                break;
            case AMOUNT:
                if (value == null) {
                    unsetAmount();
                } else {
                    setAmount((Double) value);
                }
                break;
            case USER_ID:
                if (value == null) {
                    unsetUserId();
                } else {
                    setUserId((Long) value);
                }
                break;
            case SERVER_ID:
                if (value == null) {
                    unsetServerId();
                } else {
                    setServerId((Long) value);
                }
                break;
            case PLAYER_ID:
                if (value == null) {
                    unsetPlayerId();
                } else {
                    setPlayerId((Long) value);
                }
                break;
            case SHORT_TRADE_ID:
                if (value == null) {
                    unsetShortTradeId();
                } else {
                    setShortTradeId((Boolean) value);
                }
                break;
            case MORE_DATAS:
                if (value == null) {
                    unsetMoreDatas();
                } else {
                    setMoreDatas((List<String>) value);
                }
                break;
        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case PREPARE:
                return getPrepare();
            case CONFIGURE_ID:
                return getConfigureId();
            case PLATFORM:
                return getPlatform();
            case PLATFORM_DATA:
                return getPlatformData();
            case GOODS_ID:
                return getGoodsId();
            case GOODS_NUMBER:
                return getGoodsNumber();
            case AMOUNT:
                return getAmount();
            case USER_ID:
                return getUserId();
            case SERVER_ID:
                return getServerId();
            case PLAYER_ID:
                return getPlayerId();
            case SHORT_TRADE_ID:
                return isShortTradeId();
            case MORE_DATAS:
                return getMoreDatas();
        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }
        switch(field) {
            case PREPARE:
                return isSetPrepare();
            case CONFIGURE_ID:
                return isSetConfigureId();
            case PLATFORM:
                return isSetPlatform();
            case PLATFORM_DATA:
                return isSetPlatformData();
            case GOODS_ID:
                return isSetGoodsId();
            case GOODS_NUMBER:
                return isSetGoodsNumber();
            case AMOUNT:
                return isSetAmount();
            case USER_ID:
                return isSetUserId();
            case SERVER_ID:
                return isSetServerId();
            case PLAYER_ID:
                return isSetPlayerId();
            case SHORT_TRADE_ID:
                return isSetShortTradeId();
            case MORE_DATAS:
                return isSetMoreDatas();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof DOrderInfo)
            return this.equals((DOrderInfo) that);
        return false;
    }

    public boolean equals(DOrderInfo that) {
        if (that == null)
            return false;
        boolean this_present_prepare = true && this.isSetPrepare();
        boolean that_present_prepare = true && that.isSetPrepare();
        if (this_present_prepare || that_present_prepare) {
            if (!(this_present_prepare && that_present_prepare))
                return false;
            if (!this.prepare.equals(that.prepare))
                return false;
        }
        boolean this_present_configureId = true && this.isSetConfigureId();
        boolean that_present_configureId = true && that.isSetConfigureId();
        if (this_present_configureId || that_present_configureId) {
            if (!(this_present_configureId && that_present_configureId))
                return false;
            if (this.configureId != that.configureId)
                return false;
        }
        boolean this_present_platform = true && this.isSetPlatform();
        boolean that_present_platform = true && that.isSetPlatform();
        if (this_present_platform || that_present_platform) {
            if (!(this_present_platform && that_present_platform))
                return false;
            if (!this.platform.equals(that.platform))
                return false;
        }
        boolean this_present_platformData = true && this.isSetPlatformData();
        boolean that_present_platformData = true && that.isSetPlatformData();
        if (this_present_platformData || that_present_platformData) {
            if (!(this_present_platformData && that_present_platformData))
                return false;
            if (!this.platformData.equals(that.platformData))
                return false;
        }
        boolean this_present_goodsId = true && this.isSetGoodsId();
        boolean that_present_goodsId = true && that.isSetGoodsId();
        if (this_present_goodsId || that_present_goodsId) {
            if (!(this_present_goodsId && that_present_goodsId))
                return false;
            if (!this.goodsId.equals(that.goodsId))
                return false;
        }
        boolean this_present_goodsNumber = true && this.isSetGoodsNumber();
        boolean that_present_goodsNumber = true && that.isSetGoodsNumber();
        if (this_present_goodsNumber || that_present_goodsNumber) {
            if (!(this_present_goodsNumber && that_present_goodsNumber))
                return false;
            if (this.goodsNumber != that.goodsNumber)
                return false;
        }
        boolean this_present_amount = true && this.isSetAmount();
        boolean that_present_amount = true && that.isSetAmount();
        if (this_present_amount || that_present_amount) {
            if (!(this_present_amount && that_present_amount))
                return false;
            if (this.amount != that.amount)
                return false;
        }
        boolean this_present_userId = true && this.isSetUserId();
        boolean that_present_userId = true && that.isSetUserId();
        if (this_present_userId || that_present_userId) {
            if (!(this_present_userId && that_present_userId))
                return false;
            if (this.userId != that.userId)
                return false;
        }
        boolean this_present_serverId = true && this.isSetServerId();
        boolean that_present_serverId = true && that.isSetServerId();
        if (this_present_serverId || that_present_serverId) {
            if (!(this_present_serverId && that_present_serverId))
                return false;
            if (this.serverId != that.serverId)
                return false;
        }
        boolean this_present_playerId = true && this.isSetPlayerId();
        boolean that_present_playerId = true && that.isSetPlayerId();
        if (this_present_playerId || that_present_playerId) {
            if (!(this_present_playerId && that_present_playerId))
                return false;
            if (this.playerId != that.playerId)
                return false;
        }
        boolean this_present_shortTradeId = true && this.isSetShortTradeId();
        boolean that_present_shortTradeId = true && that.isSetShortTradeId();
        if (this_present_shortTradeId || that_present_shortTradeId) {
            if (!(this_present_shortTradeId && that_present_shortTradeId))
                return false;
            if (this.shortTradeId != that.shortTradeId)
                return false;
        }
        boolean this_present_moreDatas = true && this.isSetMoreDatas();
        boolean that_present_moreDatas = true && that.isSetMoreDatas();
        if (this_present_moreDatas || that_present_moreDatas) {
            if (!(this_present_moreDatas && that_present_moreDatas))
                return false;
            if (!this.moreDatas.equals(that.moreDatas))
                return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();
        boolean present_prepare = true && (isSetPrepare());
        list.add(present_prepare);
        if (present_prepare)
            list.add(prepare);
        boolean present_configureId = true && (isSetConfigureId());
        list.add(present_configureId);
        if (present_configureId)
            list.add(configureId);
        boolean present_platform = true && (isSetPlatform());
        list.add(present_platform);
        if (present_platform)
            list.add(platform);
        boolean present_platformData = true && (isSetPlatformData());
        list.add(present_platformData);
        if (present_platformData)
            list.add(platformData);
        boolean present_goodsId = true && (isSetGoodsId());
        list.add(present_goodsId);
        if (present_goodsId)
            list.add(goodsId);
        boolean present_goodsNumber = true && (isSetGoodsNumber());
        list.add(present_goodsNumber);
        if (present_goodsNumber)
            list.add(goodsNumber);
        boolean present_amount = true && (isSetAmount());
        list.add(present_amount);
        if (present_amount)
            list.add(amount);
        boolean present_userId = true && (isSetUserId());
        list.add(present_userId);
        if (present_userId)
            list.add(userId);
        boolean present_serverId = true && (isSetServerId());
        list.add(present_serverId);
        if (present_serverId)
            list.add(serverId);
        boolean present_playerId = true && (isSetPlayerId());
        list.add(present_playerId);
        if (present_playerId)
            list.add(playerId);
        boolean present_shortTradeId = true && (isSetShortTradeId());
        list.add(present_shortTradeId);
        if (present_shortTradeId)
            list.add(shortTradeId);
        boolean present_moreDatas = true && (isSetMoreDatas());
        list.add(present_moreDatas);
        if (present_moreDatas)
            list.add(moreDatas);
        return list.hashCode();
    }

    @Override
    public int compareTo(DOrderInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }
        int lastComparison = 0;
        lastComparison = Boolean.valueOf(isSetPrepare()).compareTo(other.isSetPrepare());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPrepare()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepare, other.prepare);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetConfigureId()).compareTo(other.isSetConfigureId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetConfigureId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configureId, other.configureId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlatform()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlatformData()).compareTo(other.isSetPlatformData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlatformData()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformData, other.platformData);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGoodsId()).compareTo(other.isSetGoodsId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGoodsId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsId, other.goodsId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGoodsNumber()).compareTo(other.isSetGoodsNumber());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGoodsNumber()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsNumber, other.goodsNumber);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAmount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUserId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetServerId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlayerId()).compareTo(other.isSetPlayerId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlayerId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerId, other.playerId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetShortTradeId()).compareTo(other.isSetShortTradeId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetShortTradeId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortTradeId, other.shortTradeId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMoreDatas()).compareTo(other.isSetMoreDatas());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMoreDatas()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moreDatas, other.moreDatas);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DOrderInfo(");
        boolean first = true;
        if (isSetPrepare()) {
            sb.append("prepare:");
            if (this.prepare == null) {
                sb.append("null");
            } else {
                sb.append(this.prepare);
            }
            first = false;
        }
        if (isSetConfigureId()) {
            if (!first)
                sb.append(", ");
            sb.append("configureId:");
            sb.append(this.configureId);
            first = false;
        }
        if (isSetPlatform()) {
            if (!first)
                sb.append(", ");
            sb.append("platform:");
            if (this.platform == null) {
                sb.append("null");
            } else {
                sb.append(this.platform);
            }
            first = false;
        }
        if (isSetPlatformData()) {
            if (!first)
                sb.append(", ");
            sb.append("platformData:");
            if (this.platformData == null) {
                sb.append("null");
            } else {
                sb.append(this.platformData);
            }
            first = false;
        }
        if (isSetGoodsId()) {
            if (!first)
                sb.append(", ");
            sb.append("goodsId:");
            if (this.goodsId == null) {
                sb.append("null");
            } else {
                sb.append(this.goodsId);
            }
            first = false;
        }
        if (isSetGoodsNumber()) {
            if (!first)
                sb.append(", ");
            sb.append("goodsNumber:");
            sb.append(this.goodsNumber);
            first = false;
        }
        if (isSetAmount()) {
            if (!first)
                sb.append(", ");
            sb.append("amount:");
            sb.append(this.amount);
            first = false;
        }
        if (isSetUserId()) {
            if (!first)
                sb.append(", ");
            sb.append("userId:");
            sb.append(this.userId);
            first = false;
        }
        if (isSetServerId()) {
            if (!first)
                sb.append(", ");
            sb.append("serverId:");
            sb.append(this.serverId);
            first = false;
        }
        if (isSetPlayerId()) {
            if (!first)
                sb.append(", ");
            sb.append("playerId:");
            sb.append(this.playerId);
            first = false;
        }
        if (isSetShortTradeId()) {
            if (!first)
                sb.append(", ");
            sb.append("shortTradeId:");
            sb.append(this.shortTradeId);
            first = false;
        }
        if (isSetMoreDatas()) {
            if (!first)
                sb.append(", ");
            sb.append("moreDatas:");
            if (this.moreDatas == null) {
                sb.append("null");
            } else {
                sb.append(this.moreDatas);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class DOrderInfoStandardSchemeFactory implements SchemeFactory {

        public DOrderInfoStandardScheme getScheme() {
            return new DOrderInfoStandardScheme();
        }
    }

    private static class DOrderInfoStandardScheme extends StandardScheme<DOrderInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, DOrderInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch(schemeField.id) {
                    case // PREPARE
                    1:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.prepare = iprot.readString();
                            struct.setPrepareIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // CONFIGURE_ID
                    2:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.configureId = iprot.readI32();
                            struct.setConfigureIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // PLATFORM
                    3:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.platform = iprot.readString();
                            struct.setPlatformIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // PLATFORM_DATA
                    4:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.platformData = iprot.readString();
                            struct.setPlatformDataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // GOODS_ID
                    5:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.goodsId = iprot.readString();
                            struct.setGoodsIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // GOODS_NUMBER
                    6:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.goodsNumber = iprot.readI32();
                            struct.setGoodsNumberIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // AMOUNT
                    7:
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.amount = iprot.readDouble();
                            struct.setAmountIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // USER_ID
                    8:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.userId = iprot.readI64();
                            struct.setUserIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // SERVER_ID
                    9:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.serverId = iprot.readI64();
                            struct.setServerIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // PLAYER_ID
                    10:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.playerId = iprot.readI64();
                            struct.setPlayerIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // SHORT_TRADE_ID
                    11:
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.shortTradeId = iprot.readBool();
                            struct.setShortTradeIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // MORE_DATAS
                    12:
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                struct.moreDatas = new ArrayList<String>(_list8.size);
                                String _elem9;
                                for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
                                    _elem9 = iprot.readString();
                                    struct.moreDatas.add(_elem9);
                                }
                                iprot.readListEnd();
                            }
                            struct.setMoreDatasIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, DOrderInfo struct) throws org.apache.thrift.TException {
            struct.validate();
            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.prepare != null) {
                if (struct.isSetPrepare()) {
                    oprot.writeFieldBegin(PREPARE_FIELD_DESC);
                    oprot.writeString(struct.prepare);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetConfigureId()) {
                oprot.writeFieldBegin(CONFIGURE_ID_FIELD_DESC);
                oprot.writeI32(struct.configureId);
                oprot.writeFieldEnd();
            }
            if (struct.platform != null) {
                if (struct.isSetPlatform()) {
                    oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
                    oprot.writeString(struct.platform);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.platformData != null) {
                if (struct.isSetPlatformData()) {
                    oprot.writeFieldBegin(PLATFORM_DATA_FIELD_DESC);
                    oprot.writeString(struct.platformData);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.goodsId != null) {
                if (struct.isSetGoodsId()) {
                    oprot.writeFieldBegin(GOODS_ID_FIELD_DESC);
                    oprot.writeString(struct.goodsId);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetGoodsNumber()) {
                oprot.writeFieldBegin(GOODS_NUMBER_FIELD_DESC);
                oprot.writeI32(struct.goodsNumber);
                oprot.writeFieldEnd();
            }
            if (struct.isSetAmount()) {
                oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
                oprot.writeDouble(struct.amount);
                oprot.writeFieldEnd();
            }
            if (struct.isSetUserId()) {
                oprot.writeFieldBegin(USER_ID_FIELD_DESC);
                oprot.writeI64(struct.userId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetServerId()) {
                oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
                oprot.writeI64(struct.serverId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetPlayerId()) {
                oprot.writeFieldBegin(PLAYER_ID_FIELD_DESC);
                oprot.writeI64(struct.playerId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetShortTradeId()) {
                oprot.writeFieldBegin(SHORT_TRADE_ID_FIELD_DESC);
                oprot.writeBool(struct.shortTradeId);
                oprot.writeFieldEnd();
            }
            if (struct.moreDatas != null) {
                if (struct.isSetMoreDatas()) {
                    oprot.writeFieldBegin(MORE_DATAS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.moreDatas.size()));
                        for (String _iter11 : struct.moreDatas) {
                            oprot.writeString(_iter11);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class DOrderInfoTupleSchemeFactory implements SchemeFactory {

        public DOrderInfoTupleScheme getScheme() {
            return new DOrderInfoTupleScheme();
        }
    }

    private static class DOrderInfoTupleScheme extends TupleScheme<DOrderInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, DOrderInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetPrepare()) {
                optionals.set(0);
            }
            if (struct.isSetConfigureId()) {
                optionals.set(1);
            }
            if (struct.isSetPlatform()) {
                optionals.set(2);
            }
            if (struct.isSetPlatformData()) {
                optionals.set(3);
            }
            if (struct.isSetGoodsId()) {
                optionals.set(4);
            }
            if (struct.isSetGoodsNumber()) {
                optionals.set(5);
            }
            if (struct.isSetAmount()) {
                optionals.set(6);
            }
            if (struct.isSetUserId()) {
                optionals.set(7);
            }
            if (struct.isSetServerId()) {
                optionals.set(8);
            }
            if (struct.isSetPlayerId()) {
                optionals.set(9);
            }
            if (struct.isSetShortTradeId()) {
                optionals.set(10);
            }
            if (struct.isSetMoreDatas()) {
                optionals.set(11);
            }
            oprot.writeBitSet(optionals, 12);
            if (struct.isSetPrepare()) {
                oprot.writeString(struct.prepare);
            }
            if (struct.isSetConfigureId()) {
                oprot.writeI32(struct.configureId);
            }
            if (struct.isSetPlatform()) {
                oprot.writeString(struct.platform);
            }
            if (struct.isSetPlatformData()) {
                oprot.writeString(struct.platformData);
            }
            if (struct.isSetGoodsId()) {
                oprot.writeString(struct.goodsId);
            }
            if (struct.isSetGoodsNumber()) {
                oprot.writeI32(struct.goodsNumber);
            }
            if (struct.isSetAmount()) {
                oprot.writeDouble(struct.amount);
            }
            if (struct.isSetUserId()) {
                oprot.writeI64(struct.userId);
            }
            if (struct.isSetServerId()) {
                oprot.writeI64(struct.serverId);
            }
            if (struct.isSetPlayerId()) {
                oprot.writeI64(struct.playerId);
            }
            if (struct.isSetShortTradeId()) {
                oprot.writeBool(struct.shortTradeId);
            }
            if (struct.isSetMoreDatas()) {
                {
                    oprot.writeI32(struct.moreDatas.size());
                    for (String _iter12 : struct.moreDatas) {
                        oprot.writeString(_iter12);
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, DOrderInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(12);
            if (incoming.get(0)) {
                struct.prepare = iprot.readString();
                struct.setPrepareIsSet(true);
            }
            if (incoming.get(1)) {
                struct.configureId = iprot.readI32();
                struct.setConfigureIdIsSet(true);
            }
            if (incoming.get(2)) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
            }
            if (incoming.get(3)) {
                struct.platformData = iprot.readString();
                struct.setPlatformDataIsSet(true);
            }
            if (incoming.get(4)) {
                struct.goodsId = iprot.readString();
                struct.setGoodsIdIsSet(true);
            }
            if (incoming.get(5)) {
                struct.goodsNumber = iprot.readI32();
                struct.setGoodsNumberIsSet(true);
            }
            if (incoming.get(6)) {
                struct.amount = iprot.readDouble();
                struct.setAmountIsSet(true);
            }
            if (incoming.get(7)) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
            }
            if (incoming.get(8)) {
                struct.serverId = iprot.readI64();
                struct.setServerIdIsSet(true);
            }
            if (incoming.get(9)) {
                struct.playerId = iprot.readI64();
                struct.setPlayerIdIsSet(true);
            }
            if (incoming.get(10)) {
                struct.shortTradeId = iprot.readBool();
                struct.setShortTradeIdIsSet(true);
            }
            if (incoming.get(11)) {
                {
                    org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.moreDatas = new ArrayList<String>(_list13.size);
                    String _elem14;
                    for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                        _elem14 = iprot.readString();
                        struct.moreDatas.add(_elem14);
                    }
                }
                struct.setMoreDatasIsSet(true);
            }
        }
    }

    public String getPrepare() {
        return this.prepare;
    }

    public DOrderInfo setPrepare(String prepare) {
        this.prepare = prepare;
        return this;
    }

    public void unsetPrepare() {
        this.prepare = null;
    }

    /** Returns true if field prepare is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetPrepare() {
        return this.prepare != null;
    }

    public void setPrepareIsSet(boolean value) {
        if (!value) {
            this.prepare = null;
        }
    }

    public int getConfigureId() {
        return this.configureId;
    }

    public DOrderInfo setConfigureId(int configureId) {
        this.configureId = configureId;
        setConfigureIdIsSet(true);
        return this;
    }

    public void unsetConfigureId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGUREID_ISSET_ID);
    }

    /** Returns true if field configureId is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetConfigureId() {
        return EncodingUtils.testBit(__isset_bitfield, __CONFIGUREID_ISSET_ID);
    }

    public void setConfigureIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGUREID_ISSET_ID, value);
    }

    public String getPlatformData() {
        return this.platformData;
    }

    public DOrderInfo setPlatformData(String platformData) {
        this.platformData = platformData;
        return this;
    }

    public void unsetPlatformData() {
        this.platformData = null;
    }

    /** Returns true if field platformData is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetPlatformData() {
        return this.platformData != null;
    }

    public void setPlatformDataIsSet(boolean value) {
        if (!value) {
            this.platformData = null;
        }
    }

    public String getGoodsId() {
        return this.goodsId;
    }

    public DOrderInfo setGoodsId(String goodsId) {
        this.goodsId = goodsId;
        return this;
    }

    public void unsetGoodsId() {
        this.goodsId = null;
    }

    /** Returns true if field goodsId is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetGoodsId() {
        return this.goodsId != null;
    }

    public void setGoodsIdIsSet(boolean value) {
        if (!value) {
            this.goodsId = null;
        }
    }

    public int getGoodsNumber() {
        return this.goodsNumber;
    }

    public DOrderInfo setGoodsNumber(int goodsNumber) {
        this.goodsNumber = goodsNumber;
        setGoodsNumberIsSet(true);
        return this;
    }

    public void unsetGoodsNumber() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSNUMBER_ISSET_ID);
    }

    /** Returns true if field goodsNumber is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetGoodsNumber() {
        return EncodingUtils.testBit(__isset_bitfield, __GOODSNUMBER_ISSET_ID);
    }

    public void setGoodsNumberIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSNUMBER_ISSET_ID, value);
    }

    public double getAmount() {
        return this.amount;
    }

    public DOrderInfo setAmount(double amount) {
        this.amount = amount;
        setAmountIsSet(true);
        return this;
    }

    public void unsetAmount() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    /** Returns true if field amount is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetAmount() {
        return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
    }

    public void setAmountIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
    }

    public long getUserId() {
        return this.userId;
    }

    public DOrderInfo setUserId(long userId) {
        this.userId = userId;
        setUserIdIsSet(true);
        return this;
    }

    public void unsetUserId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetUserId() {
        return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public boolean isShortTradeId() {
        return this.shortTradeId;
    }

    public DOrderInfo setShortTradeId(boolean shortTradeId) {
        this.shortTradeId = shortTradeId;
        setShortTradeIdIsSet(true);
        return this;
    }

    public void unsetShortTradeId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTTRADEID_ISSET_ID);
    }

    /** Returns true if field shortTradeId is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetShortTradeId() {
        return EncodingUtils.testBit(__isset_bitfield, __SHORTTRADEID_ISSET_ID);
    }

    public void setShortTradeIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTTRADEID_ISSET_ID, value);
    }

    public int getMoreDatasSize() {
        return (this.moreDatas == null) ? 0 : this.moreDatas.size();
    }

    public java.util.Iterator<String> getMoreDatasIterator() {
        return (this.moreDatas == null) ? null : this.moreDatas.iterator();
    }

    public void addToMoreDatas(String elem) {
        if (this.moreDatas == null) {
            this.moreDatas = new ArrayList<String>();
        }
        this.moreDatas.add(elem);
    }

    public List<String> getMoreDatas() {
        return this.moreDatas;
    }

    public DOrderInfo setMoreDatas(List<String> moreDatas) {
        this.moreDatas = moreDatas;
        return this;
    }

    public void unsetMoreDatas() {
        this.moreDatas = null;
    }

    /** Returns true if field moreDatas is set (has been assigned a value) and false otherwise */
    @JsonIgnore
    public boolean isSetMoreDatas() {
        return this.moreDatas != null;
    }

    public void setMoreDatasIsSet(boolean value) {
        if (!value) {
            this.moreDatas = null;
        }
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.PREPARE, new org.apache.thrift.meta_data.FieldMetaData("prepare", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CONFIGURE_ID, new org.apache.thrift.meta_data.FieldMetaData("configureId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PLATFORM_DATA, new org.apache.thrift.meta_data.FieldMetaData("platformData", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.GOODS_ID, new org.apache.thrift.meta_data.FieldMetaData("goodsId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.GOODS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("goodsNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
        tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("playerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.SHORT_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("shortTradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.MORE_DATAS, new org.apache.thrift.meta_data.FieldMetaData("moreDatas", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DOrderInfo.class, metaDataMap);
    }

    public DOrderInfo create() {
        return new DOrderInfo();
    }

    public DOrderInfo clone() {
        return cloneDepth(0);
    }

    public DOrderInfo cloneDepth(int _depth) {
        DOrderInfo _clone = create();
        _clone.platform = platform;
        _clone.serverId = serverId;
        _clone.playerId = playerId;
        _clone.prepare = prepare;
        _clone.configureId = configureId;
        _clone.platformData = platformData;
        _clone.goodsId = goodsId;
        _clone.goodsNumber = goodsNumber;
        _clone.amount = amount;
        _clone.userId = userId;
        _clone.shortTradeId = shortTradeId;
        _clone.moreDatas = moreDatas;
        cloneMore(_clone, _depth);
        return _clone;
    }

    public void cloneMore(DOrderInfo _clone, int _depth) {
    }
}
