/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tplatform;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-20")
public class OrderInfo implements org.apache.thrift.TBase<OrderInfo, OrderInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OrderInfo> {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderInfo");

    private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromId", org.apache.thrift.protocol.TType.I32, (short) 1);

    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I64, (short) 3);

    private static final org.apache.thrift.protocol.TField PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerId", org.apache.thrift.protocol.TType.I64, (short) 4);

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short) 5);

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 6);

    private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short) 7);

    private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short) 8);

    private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short) 9);

    private static final org.apache.thrift.protocol.TField ORDER_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("orderData", org.apache.thrift.protocol.TType.STRING, (short) 10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    // optional
    protected int fromId;

    // optional
    protected String platform;

    // optional
    protected long serverId;

    // required
    protected long playerId;

    // required
    protected String id;

    // required
    protected String name;

    // optional
    protected String desc;

    // optional
    protected int price;

    // optional
    protected int number;

    // optional
    protected String orderData;

    // isset id assignments
    private static final int __FROMID_ISSET_ID = 0;

    private static final int __SERVERID_ISSET_ID = 1;

    private static final int __PLAYERID_ISSET_ID = 2;

    private static final int __PRICE_ISSET_ID = 3;

    private static final int __NUMBER_ISSET_ID = 4;

    protected byte __isset_bitfield = 0;

    private static final _Fields optionals[] = { _Fields.FROM_ID, _Fields.PLATFORM, _Fields.SERVER_ID, _Fields.DESC, _Fields.PRICE, _Fields.NUMBER, _Fields.ORDER_DATA };

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        schemes.put(StandardScheme.class, new OrderInfoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new OrderInfoTupleSchemeFactory());
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        FROM_ID((short) 1, "fromId"), PLATFORM((short) 2, "platform"), SERVER_ID((short) 3, "serverId"), PLAYER_ID((short) 4, "playerId"), ID((short) 5, "id"), NAME((short) 6, "name"), DESC((short) 7, "desc"), PRICE((short) 8, "price"), NUMBER((short) 9, "number"), ORDER_DATA((short) 10, "orderData");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case // FROM_ID
                1:
                    return FROM_ID;
                case // PLATFORM
                2:
                    return PLATFORM;
                case // SERVER_ID
                3:
                    return SERVER_ID;
                case // PLAYER_ID
                4:
                    return PLAYER_ID;
                case // ID
                5:
                    return ID;
                case // NAME
                6:
                    return NAME;
                case // DESC
                7:
                    return DESC;
                case // PRICE
                8:
                    return PRICE;
                case // NUMBER
                9:
                    return NUMBER;
                case // ORDER_DATA
                10:
                    return ORDER_DATA;
                default:
                    return null;
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("playerId", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ORDER_DATA, new org.apache.thrift.meta_data.FieldMetaData("orderData", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderInfo.class, metaDataMap);
    }

    public OrderInfo() {
    }

    public OrderInfo(long playerId, String id, String name) {
        this();
        this.playerId = playerId;
        setPlayerIdIsSet(true);
        this.id = id;
        this.name = name;
    }

    /**
   * Performs a deep copy on <i>other</i>.
   */
    public OrderInfo(OrderInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        this.fromId = other.fromId;
        if (other.isSetPlatform()) {
            this.platform = other.platform;
        }
        this.serverId = other.serverId;
        this.playerId = other.playerId;
        if (other.isSetId()) {
            this.id = other.id;
        }
        if (other.isSetName()) {
            this.name = other.name;
        }
        if (other.isSetDesc()) {
            this.desc = other.desc;
        }
        this.price = other.price;
        this.number = other.number;
        if (other.isSetOrderData()) {
            this.orderData = other.orderData;
        }
    }

    public OrderInfo deepCopy() {
        return new OrderInfo(this);
    }

    @Override
    public void clear() {
        setFromIdIsSet(false);
        this.fromId = 0;
        this.platform = null;
        setServerIdIsSet(false);
        this.serverId = 0;
        setPlayerIdIsSet(false);
        this.playerId = 0;
        this.id = null;
        this.name = null;
        this.desc = null;
        setPriceIsSet(false);
        this.price = 0;
        setNumberIsSet(false);
        this.number = 0;
        this.orderData = null;
    }

    public int getFromId() {
        return this.fromId;
    }

    public OrderInfo setFromId(int fromId) {
        this.fromId = fromId;
        setFromIdIsSet(true);
        return this;
    }

    public void unsetFromId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMID_ISSET_ID);
    }

    /** Returns true if field fromId is set (has been assigned a value) and false otherwise */
    public boolean isSetFromId() {
        return EncodingUtils.testBit(__isset_bitfield, __FROMID_ISSET_ID);
    }

    public void setFromIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMID_ISSET_ID, value);
    }

    public String getPlatform() {
        return this.platform;
    }

    public OrderInfo setPlatform(String platform) {
        this.platform = platform;
        return this;
    }

    public void unsetPlatform() {
        this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
        return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
        if (!value) {
            this.platform = null;
        }
    }

    public long getServerId() {
        return this.serverId;
    }

    public OrderInfo setServerId(long serverId) {
        this.serverId = serverId;
        setServerIdIsSet(true);
        return this;
    }

    public void unsetServerId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
    public boolean isSetServerId() {
        return EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
    }

    public void setServerIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
    }

    public long getPlayerId() {
        return this.playerId;
    }

    public OrderInfo setPlayerId(long playerId) {
        this.playerId = playerId;
        setPlayerIdIsSet(true);
        return this;
    }

    public void unsetPlayerId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERID_ISSET_ID);
    }

    /** Returns true if field playerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPlayerId() {
        return EncodingUtils.testBit(__isset_bitfield, __PLAYERID_ISSET_ID);
    }

    public void setPlayerIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERID_ISSET_ID, value);
    }

    public String getId() {
        return this.id;
    }

    public OrderInfo setId(String id) {
        this.id = id;
        return this;
    }

    public void unsetId() {
        this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return this.id != null;
    }

    public void setIdIsSet(boolean value) {
        if (!value) {
            this.id = null;
        }
    }

    public String getName() {
        return this.name;
    }

    public OrderInfo setName(String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public String getDesc() {
        return this.desc;
    }

    public OrderInfo setDesc(String desc) {
        this.desc = desc;
        return this;
    }

    public void unsetDesc() {
        this.desc = null;
    }

    /** Returns true if field desc is set (has been assigned a value) and false otherwise */
    public boolean isSetDesc() {
        return this.desc != null;
    }

    public void setDescIsSet(boolean value) {
        if (!value) {
            this.desc = null;
        }
    }

    public int getPrice() {
        return this.price;
    }

    public OrderInfo setPrice(int price) {
        this.price = price;
        setPriceIsSet(true);
        return this;
    }

    public void unsetPrice() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    /** Returns true if field price is set (has been assigned a value) and false otherwise */
    public boolean isSetPrice() {
        return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    public void setPriceIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
    }

    public int getNumber() {
        return this.number;
    }

    public OrderInfo setNumber(int number) {
        this.number = number;
        setNumberIsSet(true);
        return this;
    }

    public void unsetNumber() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    /** Returns true if field number is set (has been assigned a value) and false otherwise */
    public boolean isSetNumber() {
        return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
    }

    public void setNumberIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
    }

    public String getOrderData() {
        return this.orderData;
    }

    public OrderInfo setOrderData(String orderData) {
        this.orderData = orderData;
        return this;
    }

    public void unsetOrderData() {
        this.orderData = null;
    }

    /** Returns true if field orderData is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderData() {
        return this.orderData != null;
    }

    public void setOrderDataIsSet(boolean value) {
        if (!value) {
            this.orderData = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case FROM_ID:
                if (value == null) {
                    unsetFromId();
                } else {
                    setFromId((Integer) value);
                }
                break;
            case PLATFORM:
                if (value == null) {
                    unsetPlatform();
                } else {
                    setPlatform((String) value);
                }
                break;
            case SERVER_ID:
                if (value == null) {
                    unsetServerId();
                } else {
                    setServerId((Long) value);
                }
                break;
            case PLAYER_ID:
                if (value == null) {
                    unsetPlayerId();
                } else {
                    setPlayerId((Long) value);
                }
                break;
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((String) value);
                }
                break;
            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((String) value);
                }
                break;
            case DESC:
                if (value == null) {
                    unsetDesc();
                } else {
                    setDesc((String) value);
                }
                break;
            case PRICE:
                if (value == null) {
                    unsetPrice();
                } else {
                    setPrice((Integer) value);
                }
                break;
            case NUMBER:
                if (value == null) {
                    unsetNumber();
                } else {
                    setNumber((Integer) value);
                }
                break;
            case ORDER_DATA:
                if (value == null) {
                    unsetOrderData();
                } else {
                    setOrderData((String) value);
                }
                break;
        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case FROM_ID:
                return getFromId();
            case PLATFORM:
                return getPlatform();
            case SERVER_ID:
                return getServerId();
            case PLAYER_ID:
                return getPlayerId();
            case ID:
                return getId();
            case NAME:
                return getName();
            case DESC:
                return getDesc();
            case PRICE:
                return getPrice();
            case NUMBER:
                return getNumber();
            case ORDER_DATA:
                return getOrderData();
        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }
        switch(field) {
            case FROM_ID:
                return isSetFromId();
            case PLATFORM:
                return isSetPlatform();
            case SERVER_ID:
                return isSetServerId();
            case PLAYER_ID:
                return isSetPlayerId();
            case ID:
                return isSetId();
            case NAME:
                return isSetName();
            case DESC:
                return isSetDesc();
            case PRICE:
                return isSetPrice();
            case NUMBER:
                return isSetNumber();
            case ORDER_DATA:
                return isSetOrderData();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof OrderInfo)
            return this.equals((OrderInfo) that);
        return false;
    }

    public boolean equals(OrderInfo that) {
        if (that == null)
            return false;
        boolean this_present_fromId = true && this.isSetFromId();
        boolean that_present_fromId = true && that.isSetFromId();
        if (this_present_fromId || that_present_fromId) {
            if (!(this_present_fromId && that_present_fromId))
                return false;
            if (this.fromId != that.fromId)
                return false;
        }
        boolean this_present_platform = true && this.isSetPlatform();
        boolean that_present_platform = true && that.isSetPlatform();
        if (this_present_platform || that_present_platform) {
            if (!(this_present_platform && that_present_platform))
                return false;
            if (!this.platform.equals(that.platform))
                return false;
        }
        boolean this_present_serverId = true && this.isSetServerId();
        boolean that_present_serverId = true && that.isSetServerId();
        if (this_present_serverId || that_present_serverId) {
            if (!(this_present_serverId && that_present_serverId))
                return false;
            if (this.serverId != that.serverId)
                return false;
        }
        boolean this_present_playerId = true;
        boolean that_present_playerId = true;
        if (this_present_playerId || that_present_playerId) {
            if (!(this_present_playerId && that_present_playerId))
                return false;
            if (this.playerId != that.playerId)
                return false;
        }
        boolean this_present_id = true && this.isSetId();
        boolean that_present_id = true && that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (!this.id.equals(that.id))
                return false;
        }
        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }
        boolean this_present_desc = true && this.isSetDesc();
        boolean that_present_desc = true && that.isSetDesc();
        if (this_present_desc || that_present_desc) {
            if (!(this_present_desc && that_present_desc))
                return false;
            if (!this.desc.equals(that.desc))
                return false;
        }
        boolean this_present_price = true && this.isSetPrice();
        boolean that_present_price = true && that.isSetPrice();
        if (this_present_price || that_present_price) {
            if (!(this_present_price && that_present_price))
                return false;
            if (this.price != that.price)
                return false;
        }
        boolean this_present_number = true && this.isSetNumber();
        boolean that_present_number = true && that.isSetNumber();
        if (this_present_number || that_present_number) {
            if (!(this_present_number && that_present_number))
                return false;
            if (this.number != that.number)
                return false;
        }
        boolean this_present_orderData = true && this.isSetOrderData();
        boolean that_present_orderData = true && that.isSetOrderData();
        if (this_present_orderData || that_present_orderData) {
            if (!(this_present_orderData && that_present_orderData))
                return false;
            if (!this.orderData.equals(that.orderData))
                return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();
        boolean present_fromId = true && (isSetFromId());
        list.add(present_fromId);
        if (present_fromId)
            list.add(fromId);
        boolean present_platform = true && (isSetPlatform());
        list.add(present_platform);
        if (present_platform)
            list.add(platform);
        boolean present_serverId = true && (isSetServerId());
        list.add(present_serverId);
        if (present_serverId)
            list.add(serverId);
        boolean present_playerId = true;
        list.add(present_playerId);
        if (present_playerId)
            list.add(playerId);
        boolean present_id = true && (isSetId());
        list.add(present_id);
        if (present_id)
            list.add(id);
        boolean present_name = true && (isSetName());
        list.add(present_name);
        if (present_name)
            list.add(name);
        boolean present_desc = true && (isSetDesc());
        list.add(present_desc);
        if (present_desc)
            list.add(desc);
        boolean present_price = true && (isSetPrice());
        list.add(present_price);
        if (present_price)
            list.add(price);
        boolean present_number = true && (isSetNumber());
        list.add(present_number);
        if (present_number)
            list.add(number);
        boolean present_orderData = true && (isSetOrderData());
        list.add(present_orderData);
        if (present_orderData)
            list.add(orderData);
        return list.hashCode();
    }

    @Override
    public int compareTo(OrderInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }
        int lastComparison = 0;
        lastComparison = Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFromId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlatform()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetServerId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlayerId()).compareTo(other.isSetPlayerId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlayerId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerId, other.playerId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDesc()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPrice()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNumber()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOrderData()).compareTo(other.isSetOrderData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOrderData()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderData, other.orderData);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OrderInfo(");
        boolean first = true;
        if (isSetFromId()) {
            sb.append("fromId:");
            sb.append(this.fromId);
            first = false;
        }
        if (isSetPlatform()) {
            if (!first)
                sb.append(", ");
            sb.append("platform:");
            if (this.platform == null) {
                sb.append("null");
            } else {
                sb.append(this.platform);
            }
            first = false;
        }
        if (isSetServerId()) {
            if (!first)
                sb.append(", ");
            sb.append("serverId:");
            sb.append(this.serverId);
            first = false;
        }
        if (!first)
            sb.append(", ");
        sb.append("playerId:");
        sb.append(this.playerId);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("id:");
        if (this.id == null) {
            sb.append("null");
        } else {
            sb.append(this.id);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (isSetDesc()) {
            if (!first)
                sb.append(", ");
            sb.append("desc:");
            if (this.desc == null) {
                sb.append("null");
            } else {
                sb.append(this.desc);
            }
            first = false;
        }
        if (isSetPrice()) {
            if (!first)
                sb.append(", ");
            sb.append("price:");
            sb.append(this.price);
            first = false;
        }
        if (isSetNumber()) {
            if (!first)
                sb.append(", ");
            sb.append("number:");
            sb.append(this.number);
            first = false;
        }
        if (isSetOrderData()) {
            if (!first)
                sb.append(", ");
            sb.append("orderData:");
            if (this.orderData == null) {
                sb.append("null");
            } else {
                sb.append(this.orderData);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class OrderInfoStandardSchemeFactory implements SchemeFactory {

        public OrderInfoStandardScheme getScheme() {
            return new OrderInfoStandardScheme();
        }
    }

    private static class OrderInfoStandardScheme extends StandardScheme<OrderInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, OrderInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch(schemeField.id) {
                    case // FROM_ID
                    1:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.fromId = iprot.readI32();
                            struct.setFromIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // PLATFORM
                    2:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.platform = iprot.readString();
                            struct.setPlatformIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // SERVER_ID
                    3:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.serverId = iprot.readI64();
                            struct.setServerIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // PLAYER_ID
                    4:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.playerId = iprot.readI64();
                            struct.setPlayerIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // ID
                    5:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.id = iprot.readString();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // NAME
                    6:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // DESC
                    7:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.desc = iprot.readString();
                            struct.setDescIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // PRICE
                    8:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.price = iprot.readI32();
                            struct.setPriceIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // NUMBER
                    9:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.number = iprot.readI32();
                            struct.setNumberIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // ORDER_DATA
                    10:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.orderData = iprot.readString();
                            struct.setOrderDataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, OrderInfo struct) throws org.apache.thrift.TException {
            struct.validate();
            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetFromId()) {
                oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
                oprot.writeI32(struct.fromId);
                oprot.writeFieldEnd();
            }
            if (struct.platform != null) {
                if (struct.isSetPlatform()) {
                    oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
                    oprot.writeString(struct.platform);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetServerId()) {
                oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
                oprot.writeI64(struct.serverId);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PLAYER_ID_FIELD_DESC);
            oprot.writeI64(struct.playerId);
            oprot.writeFieldEnd();
            if (struct.id != null) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeString(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.desc != null) {
                if (struct.isSetDesc()) {
                    oprot.writeFieldBegin(DESC_FIELD_DESC);
                    oprot.writeString(struct.desc);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetPrice()) {
                oprot.writeFieldBegin(PRICE_FIELD_DESC);
                oprot.writeI32(struct.price);
                oprot.writeFieldEnd();
            }
            if (struct.isSetNumber()) {
                oprot.writeFieldBegin(NUMBER_FIELD_DESC);
                oprot.writeI32(struct.number);
                oprot.writeFieldEnd();
            }
            if (struct.orderData != null) {
                if (struct.isSetOrderData()) {
                    oprot.writeFieldBegin(ORDER_DATA_FIELD_DESC);
                    oprot.writeString(struct.orderData);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class OrderInfoTupleSchemeFactory implements SchemeFactory {

        public OrderInfoTupleScheme getScheme() {
            return new OrderInfoTupleScheme();
        }
    }

    private static class OrderInfoTupleScheme extends TupleScheme<OrderInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, OrderInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetFromId()) {
                optionals.set(0);
            }
            if (struct.isSetPlatform()) {
                optionals.set(1);
            }
            if (struct.isSetServerId()) {
                optionals.set(2);
            }
            if (struct.isSetPlayerId()) {
                optionals.set(3);
            }
            if (struct.isSetId()) {
                optionals.set(4);
            }
            if (struct.isSetName()) {
                optionals.set(5);
            }
            if (struct.isSetDesc()) {
                optionals.set(6);
            }
            if (struct.isSetPrice()) {
                optionals.set(7);
            }
            if (struct.isSetNumber()) {
                optionals.set(8);
            }
            if (struct.isSetOrderData()) {
                optionals.set(9);
            }
            oprot.writeBitSet(optionals, 10);
            if (struct.isSetFromId()) {
                oprot.writeI32(struct.fromId);
            }
            if (struct.isSetPlatform()) {
                oprot.writeString(struct.platform);
            }
            if (struct.isSetServerId()) {
                oprot.writeI64(struct.serverId);
            }
            if (struct.isSetPlayerId()) {
                oprot.writeI64(struct.playerId);
            }
            if (struct.isSetId()) {
                oprot.writeString(struct.id);
            }
            if (struct.isSetName()) {
                oprot.writeString(struct.name);
            }
            if (struct.isSetDesc()) {
                oprot.writeString(struct.desc);
            }
            if (struct.isSetPrice()) {
                oprot.writeI32(struct.price);
            }
            if (struct.isSetNumber()) {
                oprot.writeI32(struct.number);
            }
            if (struct.isSetOrderData()) {
                oprot.writeString(struct.orderData);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, OrderInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(10);
            if (incoming.get(0)) {
                struct.fromId = iprot.readI32();
                struct.setFromIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
            }
            if (incoming.get(2)) {
                struct.serverId = iprot.readI64();
                struct.setServerIdIsSet(true);
            }
            if (incoming.get(3)) {
                struct.playerId = iprot.readI64();
                struct.setPlayerIdIsSet(true);
            }
            if (incoming.get(4)) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
            }
            if (incoming.get(5)) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(6)) {
                struct.desc = iprot.readString();
                struct.setDescIsSet(true);
            }
            if (incoming.get(7)) {
                struct.price = iprot.readI32();
                struct.setPriceIsSet(true);
            }
            if (incoming.get(8)) {
                struct.number = iprot.readI32();
                struct.setNumberIsSet(true);
            }
            if (incoming.get(9)) {
                struct.orderData = iprot.readString();
                struct.setOrderDataIsSet(true);
            }
        }
    }

    public byte get__isset_bitfield() {
        return __isset_bitfield;
    }

    public void set__isset_bitfield(byte __isset_bitfield) {
        this.__isset_bitfield = __isset_bitfield;
    }

    public OrderInfo create() {
        return new OrderInfo();
    }

    public OrderInfo clone() {
        return cloneDepth(0);
    }

    public OrderInfo cloneDepth(int _depth) {
        OrderInfo _clone = create();
        _clone.fromId = fromId;
        _clone.platform = platform;
        _clone.serverId = serverId;
        _clone.playerId = playerId;
        _clone.id = id;
        _clone.name = name;
        _clone.desc = desc;
        _clone.price = price;
        _clone.number = number;
        _clone.orderData = orderData;
        _clone.__isset_bitfield = __isset_bitfield;
        cloneMore(_clone, _depth);
        return _clone;
    }

    public void cloneMore(OrderInfo _clone, int _depth) {
    }
}
