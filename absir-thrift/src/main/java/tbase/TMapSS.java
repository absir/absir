/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tbase;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-20")
public class TMapSS implements org.apache.thrift.TBase<TMapSS, TMapSS._Fields>, java.io.Serializable, Cloneable, Comparable<TMapSS> {

    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMapSS");

    private static final org.apache.thrift.protocol.TField TMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("tmap", org.apache.thrift.protocol.TType.MAP, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    // required
    protected Map<String, String> tmap;

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        schemes.put(StandardScheme.class, new TMapSSStandardSchemeFactory());
        schemes.put(TupleScheme.class, new TMapSSTupleSchemeFactory());
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        TMAP((short) 1, "tmap");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case // TMAP
                1:
                    return TMAP;
                default:
                    return null;
            }
        }

        /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.TMAP, new org.apache.thrift.meta_data.FieldMetaData("tmap", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMapSS.class, metaDataMap);
    }

    public TMapSS() {
    }

    public TMapSS(Map<String, String> tmap) {
        this();
        this.tmap = tmap;
    }

    /**
   * Performs a deep copy on <i>other</i>.
   */
    public TMapSS(TMapSS other) {
        if (other.isSetTmap()) {
            Map<String, String> __this__tmap = new HashMap<String, String>(other.tmap);
            this.tmap = __this__tmap;
        }
    }

    public TMapSS deepCopy() {
        return new TMapSS(this);
    }

    @Override
    public void clear() {
        this.tmap = null;
    }

    public int getTmapSize() {
        return (this.tmap == null) ? 0 : this.tmap.size();
    }

    public void putToTmap(String key, String val) {
        if (this.tmap == null) {
            this.tmap = new HashMap<String, String>();
        }
        this.tmap.put(key, val);
    }

    public Map<String, String> getTmap() {
        return this.tmap;
    }

    public TMapSS setTmap(Map<String, String> tmap) {
        this.tmap = tmap;
        return this;
    }

    public void unsetTmap() {
        this.tmap = null;
    }

    /** Returns true if field tmap is set (has been assigned a value) and false otherwise */
    public boolean isSetTmap() {
        return this.tmap != null;
    }

    public void setTmapIsSet(boolean value) {
        if (!value) {
            this.tmap = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch(field) {
            case TMAP:
                if (value == null) {
                    unsetTmap();
                } else {
                    setTmap((Map<String, String>) value);
                }
                break;
        }
    }

    public Object getFieldValue(_Fields field) {
        switch(field) {
            case TMAP:
                return getTmap();
        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }
        switch(field) {
            case TMAP:
                return isSetTmap();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof TMapSS)
            return this.equals((TMapSS) that);
        return false;
    }

    public boolean equals(TMapSS that) {
        if (that == null)
            return false;
        boolean this_present_tmap = true && this.isSetTmap();
        boolean that_present_tmap = true && that.isSetTmap();
        if (this_present_tmap || that_present_tmap) {
            if (!(this_present_tmap && that_present_tmap))
                return false;
            if (!this.tmap.equals(that.tmap))
                return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();
        boolean present_tmap = true && (isSetTmap());
        list.add(present_tmap);
        if (present_tmap)
            list.add(tmap);
        return list.hashCode();
    }

    @Override
    public int compareTo(TMapSS other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }
        int lastComparison = 0;
        lastComparison = Boolean.valueOf(isSetTmap()).compareTo(other.isSetTmap());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTmap()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tmap, other.tmap);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TMapSS(");
        boolean first = true;
        sb.append("tmap:");
        if (this.tmap == null) {
            sb.append("null");
        } else {
            sb.append(this.tmap);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TMapSSStandardSchemeFactory implements SchemeFactory {

        public TMapSSStandardScheme getScheme() {
            return new TMapSSStandardScheme();
        }
    }

    private static class TMapSSStandardScheme extends StandardScheme<TMapSS> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, TMapSS struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch(schemeField.id) {
                    case // TMAP
                    1:
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            {
                                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                                struct.tmap = new HashMap<String, String>(2 * _map20.size);
                                String _key21;
                                String _val22;
                                for (int _i23 = 0; _i23 < _map20.size; ++_i23) {
                                    _key21 = iprot.readString();
                                    _val22 = iprot.readString();
                                    struct.tmap.put(_key21, _val22);
                                }
                                iprot.readMapEnd();
                            }
                            struct.setTmapIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, TMapSS struct) throws org.apache.thrift.TException {
            struct.validate();
            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.tmap != null) {
                oprot.writeFieldBegin(TMAP_FIELD_DESC);
                {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.tmap.size()));
                    for (Map.Entry<String, String> _iter24 : struct.tmap.entrySet()) {
                        oprot.writeString(_iter24.getKey());
                        oprot.writeString(_iter24.getValue());
                    }
                    oprot.writeMapEnd();
                }
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class TMapSSTupleSchemeFactory implements SchemeFactory {

        public TMapSSTupleScheme getScheme() {
            return new TMapSSTupleScheme();
        }
    }

    private static class TMapSSTupleScheme extends TupleScheme<TMapSS> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, TMapSS struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetTmap()) {
                optionals.set(0);
            }
            oprot.writeBitSet(optionals, 1);
            if (struct.isSetTmap()) {
                {
                    oprot.writeI32(struct.tmap.size());
                    for (Map.Entry<String, String> _iter25 : struct.tmap.entrySet()) {
                        oprot.writeString(_iter25.getKey());
                        oprot.writeString(_iter25.getValue());
                    }
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, TMapSS struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(1);
            if (incoming.get(0)) {
                {
                    org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.tmap = new HashMap<String, String>(2 * _map26.size);
                    String _key27;
                    String _val28;
                    for (int _i29 = 0; _i29 < _map26.size; ++_i29) {
                        _key27 = iprot.readString();
                        _val28 = iprot.readString();
                        struct.tmap.put(_key27, _val28);
                    }
                }
                struct.setTmapIsSet(true);
            }
        }
    }

    public TMapSS create() {
        return new TMapSS();
    }

    public TMapSS clone() {
        return cloneDepth(0);
    }

    public TMapSS cloneDepth(int _depth) {
        TMapSS _clone = create();
        _clone.tmap = tmap;
        cloneMore(_clone, _depth);
        return _clone;
    }

    public void cloneMore(TMapSS _clone, int _depth) {
    }
}
